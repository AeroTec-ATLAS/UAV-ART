// Generated by gencpp from file mavros_msgs/HilControls.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_HILCONTROLS_H
#define MAVROS_MSGS_MESSAGE_HILCONTROLS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavros_msgs
{
template <class ContainerAllocator>
struct HilControls_
{
  typedef HilControls_<ContainerAllocator> Type;

  HilControls_()
    : header()
    , roll_ailerons(0.0)
    , pitch_elevator(0.0)
    , yaw_rudder(0.0)
    , throttle(0.0)
    , aux1(0.0)
    , aux2(0.0)
    , aux3(0.0)
    , aux4(0.0)
    , mode(0)
    , nav_mode(0)  {
    }
  HilControls_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , roll_ailerons(0.0)
    , pitch_elevator(0.0)
    , yaw_rudder(0.0)
    , throttle(0.0)
    , aux1(0.0)
    , aux2(0.0)
    , aux3(0.0)
    , aux4(0.0)
    , mode(0)
    , nav_mode(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _roll_ailerons_type;
  _roll_ailerons_type roll_ailerons;

   typedef float _pitch_elevator_type;
  _pitch_elevator_type pitch_elevator;

   typedef float _yaw_rudder_type;
  _yaw_rudder_type yaw_rudder;

   typedef float _throttle_type;
  _throttle_type throttle;

   typedef float _aux1_type;
  _aux1_type aux1;

   typedef float _aux2_type;
  _aux2_type aux2;

   typedef float _aux3_type;
  _aux3_type aux3;

   typedef float _aux4_type;
  _aux4_type aux4;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _nav_mode_type;
  _nav_mode_type nav_mode;





  typedef boost::shared_ptr< ::mavros_msgs::HilControls_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::HilControls_<ContainerAllocator> const> ConstPtr;

}; // struct HilControls_

typedef ::mavros_msgs::HilControls_<std::allocator<void> > HilControls;

typedef boost::shared_ptr< ::mavros_msgs::HilControls > HilControlsPtr;
typedef boost::shared_ptr< ::mavros_msgs::HilControls const> HilControlsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::HilControls_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::HilControls_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::HilControls_<ContainerAllocator1> & lhs, const ::mavros_msgs::HilControls_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.roll_ailerons == rhs.roll_ailerons &&
    lhs.pitch_elevator == rhs.pitch_elevator &&
    lhs.yaw_rudder == rhs.yaw_rudder &&
    lhs.throttle == rhs.throttle &&
    lhs.aux1 == rhs.aux1 &&
    lhs.aux2 == rhs.aux2 &&
    lhs.aux3 == rhs.aux3 &&
    lhs.aux4 == rhs.aux4 &&
    lhs.mode == rhs.mode &&
    lhs.nav_mode == rhs.nav_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::HilControls_<ContainerAllocator1> & lhs, const ::mavros_msgs::HilControls_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::HilControls_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::HilControls_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::HilControls_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::HilControls_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::HilControls_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::HilControls_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::HilControls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "698148349c3a2e5720afcae2d934acca";
  }

  static const char* value(const ::mavros_msgs::HilControls_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x698148349c3a2e57ULL;
  static const uint64_t static_value2 = 0x20afcae2d934accaULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::HilControls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/HilControls";
  }

  static const char* value(const ::mavros_msgs::HilControls_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::HilControls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# HilControls.msg\n"
"#\n"
"# ROS representation of MAVLink HIL_CONTROLS\n"
"# (deprecated, use HIL_ACTUATOR_CONTROLS instead)\n"
"# See mavlink message documentation here:\n"
"# https://mavlink.io/en/messages/common.html#HIL_CONTROLS\n"
"\n"
"std_msgs/Header header\n"
"float32 roll_ailerons\n"
"float32 pitch_elevator\n"
"float32 yaw_rudder\n"
"float32 throttle\n"
"float32 aux1\n"
"float32 aux2\n"
"float32 aux3\n"
"float32 aux4\n"
"uint8 mode\n"
"uint8 nav_mode\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavros_msgs::HilControls_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::HilControls_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.roll_ailerons);
      stream.next(m.pitch_elevator);
      stream.next(m.yaw_rudder);
      stream.next(m.throttle);
      stream.next(m.aux1);
      stream.next(m.aux2);
      stream.next(m.aux3);
      stream.next(m.aux4);
      stream.next(m.mode);
      stream.next(m.nav_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HilControls_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::HilControls_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::HilControls_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "roll_ailerons: ";
    Printer<float>::stream(s, indent + "  ", v.roll_ailerons);
    s << indent << "pitch_elevator: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_elevator);
    s << indent << "yaw_rudder: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rudder);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
    s << indent << "aux1: ";
    Printer<float>::stream(s, indent + "  ", v.aux1);
    s << indent << "aux2: ";
    Printer<float>::stream(s, indent + "  ", v.aux2);
    s << indent << "aux3: ";
    Printer<float>::stream(s, indent + "  ", v.aux3);
    s << indent << "aux4: ";
    Printer<float>::stream(s, indent + "  ", v.aux4);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "nav_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.nav_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_HILCONTROLS_H
