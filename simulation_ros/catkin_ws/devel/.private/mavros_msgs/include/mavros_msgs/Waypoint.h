// Generated by gencpp from file mavros_msgs/Waypoint.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_WAYPOINT_H
#define MAVROS_MSGS_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct Waypoint_
{
  typedef Waypoint_<ContainerAllocator> Type;

  Waypoint_()
    : frame(0)
    , command(0)
    , is_current(false)
    , autocontinue(false)
    , param1(0.0)
    , param2(0.0)
    , param3(0.0)
    , param4(0.0)
    , x_lat(0.0)
    , y_long(0.0)
    , z_alt(0.0)  {
    }
  Waypoint_(const ContainerAllocator& _alloc)
    : frame(0)
    , command(0)
    , is_current(false)
    , autocontinue(false)
    , param1(0.0)
    , param2(0.0)
    , param3(0.0)
    , param4(0.0)
    , x_lat(0.0)
    , y_long(0.0)
    , z_alt(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _frame_type;
  _frame_type frame;

   typedef uint16_t _command_type;
  _command_type command;

   typedef uint8_t _is_current_type;
  _is_current_type is_current;

   typedef uint8_t _autocontinue_type;
  _autocontinue_type autocontinue;

   typedef float _param1_type;
  _param1_type param1;

   typedef float _param2_type;
  _param2_type param2;

   typedef float _param3_type;
  _param3_type param3;

   typedef float _param4_type;
  _param4_type param4;

   typedef double _x_lat_type;
  _x_lat_type x_lat;

   typedef double _y_long_type;
  _y_long_type y_long;

   typedef double _z_alt_type;
  _z_alt_type z_alt;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FRAME_GLOBAL)
  #undef FRAME_GLOBAL
#endif
#if defined(_WIN32) && defined(FRAME_LOCAL_NED)
  #undef FRAME_LOCAL_NED
#endif
#if defined(_WIN32) && defined(FRAME_MISSION)
  #undef FRAME_MISSION
#endif
#if defined(_WIN32) && defined(FRAME_GLOBAL_REL_ALT)
  #undef FRAME_GLOBAL_REL_ALT
#endif
#if defined(_WIN32) && defined(FRAME_LOCAL_ENU)
  #undef FRAME_LOCAL_ENU
#endif
#if defined(_WIN32) && defined(FRAME_GLOBAL_INT)
  #undef FRAME_GLOBAL_INT
#endif
#if defined(_WIN32) && defined(FRAME_GLOBAL_RELATIVE_ALT_INT)
  #undef FRAME_GLOBAL_RELATIVE_ALT_INT
#endif
#if defined(_WIN32) && defined(FRAME_LOCAL_OFFSET_NED)
  #undef FRAME_LOCAL_OFFSET_NED
#endif
#if defined(_WIN32) && defined(FRAME_BODY_NED)
  #undef FRAME_BODY_NED
#endif
#if defined(_WIN32) && defined(FRAME_BODY_OFFSET_NED)
  #undef FRAME_BODY_OFFSET_NED
#endif
#if defined(_WIN32) && defined(FRAME_GLOBAL_TERRAIN_ALT)
  #undef FRAME_GLOBAL_TERRAIN_ALT
#endif
#if defined(_WIN32) && defined(FRAME_GLOBAL_TERRAIN_ALT_INT)
  #undef FRAME_GLOBAL_TERRAIN_ALT_INT
#endif
#if defined(_WIN32) && defined(FRAME_BODY_FRD)
  #undef FRAME_BODY_FRD
#endif
#if defined(_WIN32) && defined(FRAME_RESERVED_13)
  #undef FRAME_RESERVED_13
#endif
#if defined(_WIN32) && defined(FRAME_RESERVED_14)
  #undef FRAME_RESERVED_14
#endif
#if defined(_WIN32) && defined(FRAME_RESERVED_15)
  #undef FRAME_RESERVED_15
#endif
#if defined(_WIN32) && defined(FRAME_RESERVED_16)
  #undef FRAME_RESERVED_16
#endif
#if defined(_WIN32) && defined(FRAME_RESERVED_17)
  #undef FRAME_RESERVED_17
#endif
#if defined(_WIN32) && defined(FRAME_RESERVED_18)
  #undef FRAME_RESERVED_18
#endif
#if defined(_WIN32) && defined(FRAME_RESERVED_19)
  #undef FRAME_RESERVED_19
#endif
#if defined(_WIN32) && defined(FRAME_LOCAL_FRD)
  #undef FRAME_LOCAL_FRD
#endif
#if defined(_WIN32) && defined(FRAME_LOCAL_FLU)
  #undef FRAME_LOCAL_FLU
#endif

  enum {
    FRAME_GLOBAL = 0u,
    FRAME_LOCAL_NED = 1u,
    FRAME_MISSION = 2u,
    FRAME_GLOBAL_REL_ALT = 3u,
    FRAME_LOCAL_ENU = 4u,
    FRAME_GLOBAL_INT = 5u,
    FRAME_GLOBAL_RELATIVE_ALT_INT = 6u,
    FRAME_LOCAL_OFFSET_NED = 7u,
    FRAME_BODY_NED = 8u,
    FRAME_BODY_OFFSET_NED = 9u,
    FRAME_GLOBAL_TERRAIN_ALT = 10u,
    FRAME_GLOBAL_TERRAIN_ALT_INT = 11u,
    FRAME_BODY_FRD = 12u,
    FRAME_RESERVED_13 = 13u,
    FRAME_RESERVED_14 = 14u,
    FRAME_RESERVED_15 = 15u,
    FRAME_RESERVED_16 = 16u,
    FRAME_RESERVED_17 = 17u,
    FRAME_RESERVED_18 = 18u,
    FRAME_RESERVED_19 = 19u,
    FRAME_LOCAL_FRD = 20u,
    FRAME_LOCAL_FLU = 21u,
  };


  typedef boost::shared_ptr< ::mavros_msgs::Waypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::Waypoint_<ContainerAllocator> const> ConstPtr;

}; // struct Waypoint_

typedef ::mavros_msgs::Waypoint_<std::allocator<void> > Waypoint;

typedef boost::shared_ptr< ::mavros_msgs::Waypoint > WaypointPtr;
typedef boost::shared_ptr< ::mavros_msgs::Waypoint const> WaypointConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::Waypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::Waypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::Waypoint_<ContainerAllocator1> & lhs, const ::mavros_msgs::Waypoint_<ContainerAllocator2> & rhs)
{
  return lhs.frame == rhs.frame &&
    lhs.command == rhs.command &&
    lhs.is_current == rhs.is_current &&
    lhs.autocontinue == rhs.autocontinue &&
    lhs.param1 == rhs.param1 &&
    lhs.param2 == rhs.param2 &&
    lhs.param3 == rhs.param3 &&
    lhs.param4 == rhs.param4 &&
    lhs.x_lat == rhs.x_lat &&
    lhs.y_long == rhs.y_long &&
    lhs.z_alt == rhs.z_alt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::Waypoint_<ContainerAllocator1> & lhs, const ::mavros_msgs::Waypoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::Waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::Waypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7090ce9f0c7ad0665de1ddadfd11ace";
  }

  static const char* value(const ::mavros_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7090ce9f0c7ad06ULL;
  static const uint64_t static_value2 = 0x65de1ddadfd11aceULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/Waypoint";
  }

  static const char* value(const ::mavros_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Waypoint.msg\n"
"#\n"
"# ROS representation of MAVLink MISSION_ITEM\n"
"# See mavlink documentation\n"
"\n"
"\n"
"\n"
"# see enum MAV_FRAME\n"
"uint8 frame\n"
"uint8 FRAME_GLOBAL = 0\n"
"uint8 FRAME_LOCAL_NED = 1\n"
"uint8 FRAME_MISSION = 2\n"
"uint8 FRAME_GLOBAL_REL_ALT = 3\n"
"uint8 FRAME_LOCAL_ENU = 4\n"
"uint8 FRAME_GLOBAL_INT = 5\n"
"uint8 FRAME_GLOBAL_RELATIVE_ALT_INT = 6\n"
"uint8 FRAME_LOCAL_OFFSET_NED = 7\n"
"uint8 FRAME_BODY_NED = 8\n"
"uint8 FRAME_BODY_OFFSET_NED = 9\n"
"uint8 FRAME_GLOBAL_TERRAIN_ALT = 10\n"
"uint8 FRAME_GLOBAL_TERRAIN_ALT_INT = 11\n"
"uint8 FRAME_BODY_FRD = 12\n"
"uint8 FRAME_RESERVED_13 = 13\n"
"uint8 FRAME_RESERVED_14 = 14\n"
"uint8 FRAME_RESERVED_15 = 15\n"
"uint8 FRAME_RESERVED_16 = 16\n"
"uint8 FRAME_RESERVED_17 = 17\n"
"uint8 FRAME_RESERVED_18 = 18\n"
"uint8 FRAME_RESERVED_19 = 19\n"
"uint8 FRAME_LOCAL_FRD = 20\n"
"uint8 FRAME_LOCAL_FLU = 21\n"
"\n"
"# see enum MAV_CMD and CommandCode.msg\n"
"uint16 command\n"
"\n"
"bool is_current\n"
"bool autocontinue\n"
"# meaning of this params described in enum MAV_CMD\n"
"float32 param1\n"
"float32 param2\n"
"float32 param3\n"
"float32 param4\n"
"float64 x_lat\n"
"float64 y_long\n"
"float64 z_alt\n"
;
  }

  static const char* value(const ::mavros_msgs::Waypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::Waypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame);
      stream.next(m.command);
      stream.next(m.is_current);
      stream.next(m.autocontinue);
      stream.next(m.param1);
      stream.next(m.param2);
      stream.next(m.param3);
      stream.next(m.param4);
      stream.next(m.x_lat);
      stream.next(m.y_long);
      stream.next(m.z_alt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Waypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::Waypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::Waypoint_<ContainerAllocator>& v)
  {
    s << indent << "frame: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frame);
    s << indent << "command: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.command);
    s << indent << "is_current: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_current);
    s << indent << "autocontinue: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autocontinue);
    s << indent << "param1: ";
    Printer<float>::stream(s, indent + "  ", v.param1);
    s << indent << "param2: ";
    Printer<float>::stream(s, indent + "  ", v.param2);
    s << indent << "param3: ";
    Printer<float>::stream(s, indent + "  ", v.param3);
    s << indent << "param4: ";
    Printer<float>::stream(s, indent + "  ", v.param4);
    s << indent << "x_lat: ";
    Printer<double>::stream(s, indent + "  ", v.x_lat);
    s << indent << "y_long: ";
    Printer<double>::stream(s, indent + "  ", v.y_long);
    s << indent << "z_alt: ";
    Printer<double>::stream(s, indent + "  ", v.z_alt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_WAYPOINT_H
