// Generated by gencpp from file mavros_msgs/OverrideRCIn.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_OVERRIDERCIN_H
#define MAVROS_MSGS_MESSAGE_OVERRIDERCIN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct OverrideRCIn_
{
  typedef OverrideRCIn_<ContainerAllocator> Type;

  OverrideRCIn_()
    : channels()  {
      channels.assign(0);
  }
  OverrideRCIn_(const ContainerAllocator& _alloc)
    : channels()  {
  (void)_alloc;
      channels.assign(0);
  }



   typedef boost::array<uint16_t, 18>  _channels_type;
  _channels_type channels;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CHAN_RELEASE)
  #undef CHAN_RELEASE
#endif
#if defined(_WIN32) && defined(CHAN_NOCHANGE)
  #undef CHAN_NOCHANGE
#endif

  enum {
    CHAN_RELEASE = 0u,
    CHAN_NOCHANGE = 65535u,
  };


  typedef boost::shared_ptr< ::mavros_msgs::OverrideRCIn_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::OverrideRCIn_<ContainerAllocator> const> ConstPtr;

}; // struct OverrideRCIn_

typedef ::mavros_msgs::OverrideRCIn_<std::allocator<void> > OverrideRCIn;

typedef boost::shared_ptr< ::mavros_msgs::OverrideRCIn > OverrideRCInPtr;
typedef boost::shared_ptr< ::mavros_msgs::OverrideRCIn const> OverrideRCInConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::OverrideRCIn_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::OverrideRCIn_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::OverrideRCIn_<ContainerAllocator1> & lhs, const ::mavros_msgs::OverrideRCIn_<ContainerAllocator2> & rhs)
{
  return lhs.channels == rhs.channels;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::OverrideRCIn_<ContainerAllocator1> & lhs, const ::mavros_msgs::OverrideRCIn_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::OverrideRCIn_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::OverrideRCIn_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::OverrideRCIn_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::OverrideRCIn_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::OverrideRCIn_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::OverrideRCIn_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::OverrideRCIn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd1e1c08fa504ec32737c41f45223398";
  }

  static const char* value(const ::mavros_msgs::OverrideRCIn_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd1e1c08fa504ec3ULL;
  static const uint64_t static_value2 = 0x2737c41f45223398ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::OverrideRCIn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/OverrideRCIn";
  }

  static const char* value(const ::mavros_msgs::OverrideRCIn_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::OverrideRCIn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Override RC Input\n"
"# Currently MAVLink defines override for 18 channels\n"
"\n"
"# https://mavlink.io/en/messages/common.html#RC_CHANNELS_OVERRIDE\n"
"\n"
"uint16 CHAN_RELEASE=0\n"
"uint16 CHAN_NOCHANGE=65535\n"
"\n"
"uint16[18] channels\n"
;
  }

  static const char* value(const ::mavros_msgs::OverrideRCIn_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::OverrideRCIn_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.channels);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OverrideRCIn_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::OverrideRCIn_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::OverrideRCIn_<ContainerAllocator>& v)
  {
    s << indent << "channels[]" << std::endl;
    for (size_t i = 0; i < v.channels.size(); ++i)
    {
      s << indent << "  channels[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.channels[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_OVERRIDERCIN_H
