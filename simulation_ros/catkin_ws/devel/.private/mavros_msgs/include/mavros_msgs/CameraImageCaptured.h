// Generated by gencpp from file mavros_msgs/CameraImageCaptured.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_CAMERAIMAGECAPTURED_H
#define MAVROS_MSGS_MESSAGE_CAMERAIMAGECAPTURED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>
#include <geographic_msgs/GeoPoint.h>

namespace mavros_msgs
{
template <class ContainerAllocator>
struct CameraImageCaptured_
{
  typedef CameraImageCaptured_<ContainerAllocator> Type;

  CameraImageCaptured_()
    : header()
    , orientation()
    , geo()
    , relative_alt(0.0)
    , image_index(0)
    , capture_result(0)
    , file_url()  {
    }
  CameraImageCaptured_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , orientation(_alloc)
    , geo(_alloc)
    , relative_alt(0.0)
    , image_index(0)
    , capture_result(0)
    , file_url(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef  ::geographic_msgs::GeoPoint_<ContainerAllocator>  _geo_type;
  _geo_type geo;

   typedef float _relative_alt_type;
  _relative_alt_type relative_alt;

   typedef int32_t _image_index_type;
  _image_index_type image_index;

   typedef int8_t _capture_result_type;
  _capture_result_type capture_result;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _file_url_type;
  _file_url_type file_url;





  typedef boost::shared_ptr< ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> const> ConstPtr;

}; // struct CameraImageCaptured_

typedef ::mavros_msgs::CameraImageCaptured_<std::allocator<void> > CameraImageCaptured;

typedef boost::shared_ptr< ::mavros_msgs::CameraImageCaptured > CameraImageCapturedPtr;
typedef boost::shared_ptr< ::mavros_msgs::CameraImageCaptured const> CameraImageCapturedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::CameraImageCaptured_<ContainerAllocator1> & lhs, const ::mavros_msgs::CameraImageCaptured_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.orientation == rhs.orientation &&
    lhs.geo == rhs.geo &&
    lhs.relative_alt == rhs.relative_alt &&
    lhs.image_index == rhs.image_index &&
    lhs.capture_result == rhs.capture_result &&
    lhs.file_url == rhs.file_url;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::CameraImageCaptured_<ContainerAllocator1> & lhs, const ::mavros_msgs::CameraImageCaptured_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9559d135fc7e5e91d3f1b819ebcd7556";
  }

  static const char* value(const ::mavros_msgs::CameraImageCaptured_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9559d135fc7e5e91ULL;
  static const uint64_t static_value2 = 0xd3f1b819ebcd7556ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/CameraImageCaptured";
  }

  static const char* value(const ::mavros_msgs::CameraImageCaptured_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MAVLink message: CAMERA_IMAGE_CAPTURED\n"
"# https://mavlink.io/en/messages/common.html#CAMERA_IMAGE_CAPTURED\n"
"\n"
"std_msgs/Header header\n"
"\n"
"geometry_msgs/Quaternion orientation	# Quaternion of camera orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)\n"
"geographic_msgs/GeoPoint geo\n"
"float32 relative_alt	# mm	Altitude above ground\n"
"int32 image_index # Zero based index of this image (i.e. a new image will have index CAMERA_CAPTURE_STATUS.image count -1)\n"
"int8 capture_result # Boolean indicating success (1) or failure (0) while capturing this image.\n"
"string file_url #URL of image taken. Either local storage or http://foo.jpg if camera provides an HTTP interface.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geographic_msgs/GeoPoint\n"
"# Geographic point, using the WGS 84 reference ellipsoid.\n"
"\n"
"# Latitude [degrees]. Positive is north of equator; negative is south\n"
"# (-90 <= latitude <= +90).\n"
"float64 latitude\n"
"\n"
"# Longitude [degrees]. Positive is east of prime meridian; negative is\n"
"# west (-180 <= longitude <= +180). At the poles, latitude is -90 or\n"
"# +90, and longitude is irrelevant, but must be in range.\n"
"float64 longitude\n"
"\n"
"# Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).\n"
"float64 altitude\n"
;
  }

  static const char* value(const ::mavros_msgs::CameraImageCaptured_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.orientation);
      stream.next(m.geo);
      stream.next(m.relative_alt);
      stream.next(m.image_index);
      stream.next(m.capture_result);
      stream.next(m.file_url);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CameraImageCaptured_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::CameraImageCaptured_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::CameraImageCaptured_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "geo: ";
    s << std::endl;
    Printer< ::geographic_msgs::GeoPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.geo);
    s << indent << "relative_alt: ";
    Printer<float>::stream(s, indent + "  ", v.relative_alt);
    s << indent << "image_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_index);
    s << indent << "capture_result: ";
    Printer<int8_t>::stream(s, indent + "  ", v.capture_result);
    s << indent << "file_url: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.file_url);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_CAMERAIMAGECAPTURED_H
