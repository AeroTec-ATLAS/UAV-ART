// Generated by gencpp from file mavros_msgs/CommandCode.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_COMMANDCODE_H
#define MAVROS_MSGS_MESSAGE_COMMANDCODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct CommandCode_
{
  typedef CommandCode_<ContainerAllocator> Type;

  CommandCode_()
    {
    }
  CommandCode_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(AIRFRAME_CONFIGURATION)
  #undef AIRFRAME_CONFIGURATION
#endif
#if defined(_WIN32) && defined(ARM_AUTHORIZATION_REQUEST)
  #undef ARM_AUTHORIZATION_REQUEST
#endif
#if defined(_WIN32) && defined(COMPONENT_ARM_DISARM)
  #undef COMPONENT_ARM_DISARM
#endif
#if defined(_WIN32) && defined(CONDITION_DELAY)
  #undef CONDITION_DELAY
#endif
#if defined(_WIN32) && defined(CONDITION_CHANGE_ALT)
  #undef CONDITION_CHANGE_ALT
#endif
#if defined(_WIN32) && defined(CONDITION_DISTANCE)
  #undef CONDITION_DISTANCE
#endif
#if defined(_WIN32) && defined(CONDITION_YAW)
  #undef CONDITION_YAW
#endif
#if defined(_WIN32) && defined(CONDITION_LAST)
  #undef CONDITION_LAST
#endif
#if defined(_WIN32) && defined(CONTROL_HIGH_LATENCY)
  #undef CONTROL_HIGH_LATENCY
#endif
#if defined(_WIN32) && defined(DO_FOLLOW)
  #undef DO_FOLLOW
#endif
#if defined(_WIN32) && defined(DO_FOLLOW_REPOSITION)
  #undef DO_FOLLOW_REPOSITION
#endif
#if defined(_WIN32) && defined(DO_SET_MODE)
  #undef DO_SET_MODE
#endif
#if defined(_WIN32) && defined(DO_JUMP)
  #undef DO_JUMP
#endif
#if defined(_WIN32) && defined(DO_CHANGE_SPEED)
  #undef DO_CHANGE_SPEED
#endif
#if defined(_WIN32) && defined(DO_SET_HOME)
  #undef DO_SET_HOME
#endif
#if defined(_WIN32) && defined(DO_SET_PARAMETER)
  #undef DO_SET_PARAMETER
#endif
#if defined(_WIN32) && defined(DO_SET_RELAY)
  #undef DO_SET_RELAY
#endif
#if defined(_WIN32) && defined(DO_REPEAT_RELAY)
  #undef DO_REPEAT_RELAY
#endif
#if defined(_WIN32) && defined(DO_SET_SERVO)
  #undef DO_SET_SERVO
#endif
#if defined(_WIN32) && defined(DO_REPEAT_SERVO)
  #undef DO_REPEAT_SERVO
#endif
#if defined(_WIN32) && defined(DO_FLIGHTTERMINATION)
  #undef DO_FLIGHTTERMINATION
#endif
#if defined(_WIN32) && defined(DO_CHANGE_ALTITUDE)
  #undef DO_CHANGE_ALTITUDE
#endif
#if defined(_WIN32) && defined(DO_LAND_START)
  #undef DO_LAND_START
#endif
#if defined(_WIN32) && defined(DO_RALLY_LAND)
  #undef DO_RALLY_LAND
#endif
#if defined(_WIN32) && defined(DO_GO_AROUND)
  #undef DO_GO_AROUND
#endif
#if defined(_WIN32) && defined(DO_REPOSITION)
  #undef DO_REPOSITION
#endif
#if defined(_WIN32) && defined(DO_PAUSE_CONTINUE)
  #undef DO_PAUSE_CONTINUE
#endif
#if defined(_WIN32) && defined(DO_SET_REVERSE)
  #undef DO_SET_REVERSE
#endif
#if defined(_WIN32) && defined(DO_SET_ROI_LOCATION)
  #undef DO_SET_ROI_LOCATION
#endif
#if defined(_WIN32) && defined(DO_SET_ROI_WPNEXT_OFFSET)
  #undef DO_SET_ROI_WPNEXT_OFFSET
#endif
#if defined(_WIN32) && defined(DO_SET_ROI_NONE)
  #undef DO_SET_ROI_NONE
#endif
#if defined(_WIN32) && defined(DO_SET_ROI_SYSID)
  #undef DO_SET_ROI_SYSID
#endif
#if defined(_WIN32) && defined(DO_CONTROL_VIDEO)
  #undef DO_CONTROL_VIDEO
#endif
#if defined(_WIN32) && defined(DO_SET_ROI)
  #undef DO_SET_ROI
#endif
#if defined(_WIN32) && defined(DO_DIGICAM_CONFIGURE)
  #undef DO_DIGICAM_CONFIGURE
#endif
#if defined(_WIN32) && defined(DO_DIGICAM_CONTROL)
  #undef DO_DIGICAM_CONTROL
#endif
#if defined(_WIN32) && defined(DO_MOUNT_CONFIGURE)
  #undef DO_MOUNT_CONFIGURE
#endif
#if defined(_WIN32) && defined(DO_MOUNT_CONTROL)
  #undef DO_MOUNT_CONTROL
#endif
#if defined(_WIN32) && defined(DO_SET_CAM_TRIGG_DIST)
  #undef DO_SET_CAM_TRIGG_DIST
#endif
#if defined(_WIN32) && defined(DO_FENCE_ENABLE)
  #undef DO_FENCE_ENABLE
#endif
#if defined(_WIN32) && defined(DO_PARACHUTE)
  #undef DO_PARACHUTE
#endif
#if defined(_WIN32) && defined(DO_MOTOR_TEST)
  #undef DO_MOTOR_TEST
#endif
#if defined(_WIN32) && defined(DO_INVERTED_FLIGHT)
  #undef DO_INVERTED_FLIGHT
#endif
#if defined(_WIN32) && defined(DO_GRIPPER)
  #undef DO_GRIPPER
#endif
#if defined(_WIN32) && defined(DO_AUTOTUNE_ENABLE)
  #undef DO_AUTOTUNE_ENABLE
#endif
#if defined(_WIN32) && defined(DO_SET_CAM_TRIGG_INTERVAL)
  #undef DO_SET_CAM_TRIGG_INTERVAL
#endif
#if defined(_WIN32) && defined(DO_MOUNT_CONTROL_QUAT)
  #undef DO_MOUNT_CONTROL_QUAT
#endif
#if defined(_WIN32) && defined(DO_GUIDED_MASTER)
  #undef DO_GUIDED_MASTER
#endif
#if defined(_WIN32) && defined(DO_GUIDED_LIMITS)
  #undef DO_GUIDED_LIMITS
#endif
#if defined(_WIN32) && defined(DO_ENGINE_CONTROL)
  #undef DO_ENGINE_CONTROL
#endif
#if defined(_WIN32) && defined(DO_SET_MISSION_CURRENT)
  #undef DO_SET_MISSION_CURRENT
#endif
#if defined(_WIN32) && defined(DO_LAST)
  #undef DO_LAST
#endif
#if defined(_WIN32) && defined(DO_JUMP_TAG)
  #undef DO_JUMP_TAG
#endif
#if defined(_WIN32) && defined(DO_TRIGGER_CONTROL)
  #undef DO_TRIGGER_CONTROL
#endif
#if defined(_WIN32) && defined(DO_VTOL_TRANSITION)
  #undef DO_VTOL_TRANSITION
#endif
#if defined(_WIN32) && defined(DO_ADSB_OUT_IDENT)
  #undef DO_ADSB_OUT_IDENT
#endif
#if defined(_WIN32) && defined(DO_WINCH)
  #undef DO_WINCH
#endif
#if defined(_WIN32) && defined(FIXED_MAG_CAL_YAW)
  #undef FIXED_MAG_CAL_YAW
#endif
#if defined(_WIN32) && defined(GET_HOME_POSITION)
  #undef GET_HOME_POSITION
#endif
#if defined(_WIN32) && defined(GET_MESSAGE_INTERVAL)
  #undef GET_MESSAGE_INTERVAL
#endif
#if defined(_WIN32) && defined(IMAGE_START_CAPTURE)
  #undef IMAGE_START_CAPTURE
#endif
#if defined(_WIN32) && defined(IMAGE_STOP_CAPTURE)
  #undef IMAGE_STOP_CAPTURE
#endif
#if defined(_WIN32) && defined(JUMP_TAG)
  #undef JUMP_TAG
#endif
#if defined(_WIN32) && defined(LOGGING_START)
  #undef LOGGING_START
#endif
#if defined(_WIN32) && defined(LOGGING_STOP)
  #undef LOGGING_STOP
#endif
#if defined(_WIN32) && defined(MISSION_START)
  #undef MISSION_START
#endif
#if defined(_WIN32) && defined(NAV_WAYPOINT)
  #undef NAV_WAYPOINT
#endif
#if defined(_WIN32) && defined(NAV_LOITER_UNLIM)
  #undef NAV_LOITER_UNLIM
#endif
#if defined(_WIN32) && defined(NAV_LOITER_TURNS)
  #undef NAV_LOITER_TURNS
#endif
#if defined(_WIN32) && defined(NAV_LOITER_TIME)
  #undef NAV_LOITER_TIME
#endif
#if defined(_WIN32) && defined(NAV_RETURN_TO_LAUNCH)
  #undef NAV_RETURN_TO_LAUNCH
#endif
#if defined(_WIN32) && defined(NAV_LAND)
  #undef NAV_LAND
#endif
#if defined(_WIN32) && defined(NAV_TAKEOFF)
  #undef NAV_TAKEOFF
#endif
#if defined(_WIN32) && defined(NAV_LAND_LOCAL)
  #undef NAV_LAND_LOCAL
#endif
#if defined(_WIN32) && defined(NAV_TAKEOFF_LOCAL)
  #undef NAV_TAKEOFF_LOCAL
#endif
#if defined(_WIN32) && defined(NAV_FOLLOW)
  #undef NAV_FOLLOW
#endif
#if defined(_WIN32) && defined(NAV_CONTINUE_AND_CHANGE_ALT)
  #undef NAV_CONTINUE_AND_CHANGE_ALT
#endif
#if defined(_WIN32) && defined(NAV_LOITER_TO_ALT)
  #undef NAV_LOITER_TO_ALT
#endif
#if defined(_WIN32) && defined(NAV_ROI)
  #undef NAV_ROI
#endif
#if defined(_WIN32) && defined(NAV_PATHPLANNING)
  #undef NAV_PATHPLANNING
#endif
#if defined(_WIN32) && defined(NAV_SPLINE_WAYPOINT)
  #undef NAV_SPLINE_WAYPOINT
#endif
#if defined(_WIN32) && defined(NAV_VTOL_TAKEOFF)
  #undef NAV_VTOL_TAKEOFF
#endif
#if defined(_WIN32) && defined(NAV_VTOL_LAND)
  #undef NAV_VTOL_LAND
#endif
#if defined(_WIN32) && defined(NAV_GUIDED_ENABLE)
  #undef NAV_GUIDED_ENABLE
#endif
#if defined(_WIN32) && defined(NAV_DELAY)
  #undef NAV_DELAY
#endif
#if defined(_WIN32) && defined(NAV_PAYLOAD_PLACE)
  #undef NAV_PAYLOAD_PLACE
#endif
#if defined(_WIN32) && defined(NAV_LAST)
  #undef NAV_LAST
#endif
#if defined(_WIN32) && defined(NAV_SET_YAW_SPEED)
  #undef NAV_SET_YAW_SPEED
#endif
#if defined(_WIN32) && defined(NAV_FENCE_RETURN_POINT)
  #undef NAV_FENCE_RETURN_POINT
#endif
#if defined(_WIN32) && defined(NAV_FENCE_POLYGON_VERTEX_INCLUSION)
  #undef NAV_FENCE_POLYGON_VERTEX_INCLUSION
#endif
#if defined(_WIN32) && defined(NAV_FENCE_POLYGON_VERTEX_EXCLUSION)
  #undef NAV_FENCE_POLYGON_VERTEX_EXCLUSION
#endif
#if defined(_WIN32) && defined(NAV_FENCE_CIRCLE_INCLUSION)
  #undef NAV_FENCE_CIRCLE_INCLUSION
#endif
#if defined(_WIN32) && defined(NAV_FENCE_CIRCLE_EXCLUSION)
  #undef NAV_FENCE_CIRCLE_EXCLUSION
#endif
#if defined(_WIN32) && defined(NAV_RALLY_POINT)
  #undef NAV_RALLY_POINT
#endif
#if defined(_WIN32) && defined(OBLIQUE_SURVEY)
  #undef OBLIQUE_SURVEY
#endif
#if defined(_WIN32) && defined(OVERRIDE_GOTO)
  #undef OVERRIDE_GOTO
#endif
#if defined(_WIN32) && defined(PANORAMA_CREATE)
  #undef PANORAMA_CREATE
#endif
#if defined(_WIN32) && defined(PAYLOAD_PREPARE_DEPLOY)
  #undef PAYLOAD_PREPARE_DEPLOY
#endif
#if defined(_WIN32) && defined(PAYLOAD_CONTROL_DEPLOY)
  #undef PAYLOAD_CONTROL_DEPLOY
#endif
#if defined(_WIN32) && defined(PREFLIGHT_CALIBRATION)
  #undef PREFLIGHT_CALIBRATION
#endif
#if defined(_WIN32) && defined(PREFLIGHT_SET_SENSOR_OFFSETS)
  #undef PREFLIGHT_SET_SENSOR_OFFSETS
#endif
#if defined(_WIN32) && defined(PREFLIGHT_UAVCAN)
  #undef PREFLIGHT_UAVCAN
#endif
#if defined(_WIN32) && defined(PREFLIGHT_STORAGE)
  #undef PREFLIGHT_STORAGE
#endif
#if defined(_WIN32) && defined(PREFLIGHT_REBOOT_SHUTDOWN)
  #undef PREFLIGHT_REBOOT_SHUTDOWN
#endif
#if defined(_WIN32) && defined(REQUEST_MESSAGE)
  #undef REQUEST_MESSAGE
#endif
#if defined(_WIN32) && defined(REQUEST_PROTOCOL_VERSION)
  #undef REQUEST_PROTOCOL_VERSION
#endif
#if defined(_WIN32) && defined(REQUEST_AUTOPILOT_CAPABILITIES)
  #undef REQUEST_AUTOPILOT_CAPABILITIES
#endif
#if defined(_WIN32) && defined(REQUEST_CAMERA_INFORMATION)
  #undef REQUEST_CAMERA_INFORMATION
#endif
#if defined(_WIN32) && defined(REQUEST_CAMERA_SETTINGS)
  #undef REQUEST_CAMERA_SETTINGS
#endif
#if defined(_WIN32) && defined(REQUEST_STORAGE_INFORMATION)
  #undef REQUEST_STORAGE_INFORMATION
#endif
#if defined(_WIN32) && defined(REQUEST_CAMERA_CAPTURE_STATUS)
  #undef REQUEST_CAMERA_CAPTURE_STATUS
#endif
#if defined(_WIN32) && defined(REQUEST_FLIGHT_INFORMATION)
  #undef REQUEST_FLIGHT_INFORMATION
#endif
#if defined(_WIN32) && defined(REQUEST_VIDEO_STREAM_INFORMATION)
  #undef REQUEST_VIDEO_STREAM_INFORMATION
#endif
#if defined(_WIN32) && defined(REQUEST_VIDEO_STREAM_STATUS)
  #undef REQUEST_VIDEO_STREAM_STATUS
#endif
#if defined(_WIN32) && defined(RESET_CAMERA_SETTINGS)
  #undef RESET_CAMERA_SETTINGS
#endif
#if defined(_WIN32) && defined(RUN_PREARM_CHECKS)
  #undef RUN_PREARM_CHECKS
#endif
#if defined(_WIN32) && defined(SET_MESSAGE_INTERVAL)
  #undef SET_MESSAGE_INTERVAL
#endif
#if defined(_WIN32) && defined(SET_CAMERA_MODE)
  #undef SET_CAMERA_MODE
#endif
#if defined(_WIN32) && defined(SET_GUIDED_SUBMODE_STANDARD)
  #undef SET_GUIDED_SUBMODE_STANDARD
#endif
#if defined(_WIN32) && defined(SET_GUIDED_SUBMODE_CIRCLE)
  #undef SET_GUIDED_SUBMODE_CIRCLE
#endif
#if defined(_WIN32) && defined(START_RX_PAIR)
  #undef START_RX_PAIR
#endif
#if defined(_WIN32) && defined(STORAGE_FORMAT)
  #undef STORAGE_FORMAT
#endif
#if defined(_WIN32) && defined(UAVCAN_GET_NODE_INFO)
  #undef UAVCAN_GET_NODE_INFO
#endif
#if defined(_WIN32) && defined(VIDEO_START_CAPTURE)
  #undef VIDEO_START_CAPTURE
#endif
#if defined(_WIN32) && defined(VIDEO_STOP_CAPTURE)
  #undef VIDEO_STOP_CAPTURE
#endif
#if defined(_WIN32) && defined(VIDEO_START_STREAMING)
  #undef VIDEO_START_STREAMING
#endif
#if defined(_WIN32) && defined(VIDEO_STOP_STREAMING)
  #undef VIDEO_STOP_STREAMING
#endif

  enum {
    AIRFRAME_CONFIGURATION = 2520u,
    ARM_AUTHORIZATION_REQUEST = 3001u,
    COMPONENT_ARM_DISARM = 400u,
    CONDITION_DELAY = 112u,
    CONDITION_CHANGE_ALT = 113u,
    CONDITION_DISTANCE = 114u,
    CONDITION_YAW = 115u,
    CONDITION_LAST = 159u,
    CONTROL_HIGH_LATENCY = 2600u,
    DO_FOLLOW = 32u,
    DO_FOLLOW_REPOSITION = 33u,
    DO_SET_MODE = 176u,
    DO_JUMP = 177u,
    DO_CHANGE_SPEED = 178u,
    DO_SET_HOME = 179u,
    DO_SET_PARAMETER = 180u,
    DO_SET_RELAY = 181u,
    DO_REPEAT_RELAY = 182u,
    DO_SET_SERVO = 183u,
    DO_REPEAT_SERVO = 184u,
    DO_FLIGHTTERMINATION = 185u,
    DO_CHANGE_ALTITUDE = 186u,
    DO_LAND_START = 189u,
    DO_RALLY_LAND = 190u,
    DO_GO_AROUND = 191u,
    DO_REPOSITION = 192u,
    DO_PAUSE_CONTINUE = 193u,
    DO_SET_REVERSE = 194u,
    DO_SET_ROI_LOCATION = 195u,
    DO_SET_ROI_WPNEXT_OFFSET = 196u,
    DO_SET_ROI_NONE = 197u,
    DO_SET_ROI_SYSID = 198u,
    DO_CONTROL_VIDEO = 200u,
    DO_SET_ROI = 201u,
    DO_DIGICAM_CONFIGURE = 202u,
    DO_DIGICAM_CONTROL = 203u,
    DO_MOUNT_CONFIGURE = 204u,
    DO_MOUNT_CONTROL = 205u,
    DO_SET_CAM_TRIGG_DIST = 206u,
    DO_FENCE_ENABLE = 207u,
    DO_PARACHUTE = 208u,
    DO_MOTOR_TEST = 209u,
    DO_INVERTED_FLIGHT = 210u,
    DO_GRIPPER = 211u,
    DO_AUTOTUNE_ENABLE = 212u,
    DO_SET_CAM_TRIGG_INTERVAL = 214u,
    DO_MOUNT_CONTROL_QUAT = 220u,
    DO_GUIDED_MASTER = 221u,
    DO_GUIDED_LIMITS = 222u,
    DO_ENGINE_CONTROL = 223u,
    DO_SET_MISSION_CURRENT = 224u,
    DO_LAST = 240u,
    DO_JUMP_TAG = 601u,
    DO_TRIGGER_CONTROL = 2003u,
    DO_VTOL_TRANSITION = 3000u,
    DO_ADSB_OUT_IDENT = 10001u,
    DO_WINCH = 42600u,
    FIXED_MAG_CAL_YAW = 42006u,
    GET_HOME_POSITION = 410u,
    GET_MESSAGE_INTERVAL = 510u,
    IMAGE_START_CAPTURE = 2000u,
    IMAGE_STOP_CAPTURE = 2001u,
    JUMP_TAG = 600u,
    LOGGING_START = 2510u,
    LOGGING_STOP = 2511u,
    MISSION_START = 300u,
    NAV_WAYPOINT = 16u,
    NAV_LOITER_UNLIM = 17u,
    NAV_LOITER_TURNS = 18u,
    NAV_LOITER_TIME = 19u,
    NAV_RETURN_TO_LAUNCH = 20u,
    NAV_LAND = 21u,
    NAV_TAKEOFF = 22u,
    NAV_LAND_LOCAL = 23u,
    NAV_TAKEOFF_LOCAL = 24u,
    NAV_FOLLOW = 25u,
    NAV_CONTINUE_AND_CHANGE_ALT = 30u,
    NAV_LOITER_TO_ALT = 31u,
    NAV_ROI = 80u,
    NAV_PATHPLANNING = 81u,
    NAV_SPLINE_WAYPOINT = 82u,
    NAV_VTOL_TAKEOFF = 84u,
    NAV_VTOL_LAND = 85u,
    NAV_GUIDED_ENABLE = 92u,
    NAV_DELAY = 93u,
    NAV_PAYLOAD_PLACE = 94u,
    NAV_LAST = 95u,
    NAV_SET_YAW_SPEED = 213u,
    NAV_FENCE_RETURN_POINT = 5000u,
    NAV_FENCE_POLYGON_VERTEX_INCLUSION = 5001u,
    NAV_FENCE_POLYGON_VERTEX_EXCLUSION = 5002u,
    NAV_FENCE_CIRCLE_INCLUSION = 5003u,
    NAV_FENCE_CIRCLE_EXCLUSION = 5004u,
    NAV_RALLY_POINT = 5100u,
    OBLIQUE_SURVEY = 260u,
    OVERRIDE_GOTO = 252u,
    PANORAMA_CREATE = 2800u,
    PAYLOAD_PREPARE_DEPLOY = 30001u,
    PAYLOAD_CONTROL_DEPLOY = 30002u,
    PREFLIGHT_CALIBRATION = 241u,
    PREFLIGHT_SET_SENSOR_OFFSETS = 242u,
    PREFLIGHT_UAVCAN = 243u,
    PREFLIGHT_STORAGE = 245u,
    PREFLIGHT_REBOOT_SHUTDOWN = 246u,
    REQUEST_MESSAGE = 512u,
    REQUEST_PROTOCOL_VERSION = 519u,
    REQUEST_AUTOPILOT_CAPABILITIES = 520u,
    REQUEST_CAMERA_INFORMATION = 521u,
    REQUEST_CAMERA_SETTINGS = 522u,
    REQUEST_STORAGE_INFORMATION = 525u,
    REQUEST_CAMERA_CAPTURE_STATUS = 527u,
    REQUEST_FLIGHT_INFORMATION = 528u,
    REQUEST_VIDEO_STREAM_INFORMATION = 2504u,
    REQUEST_VIDEO_STREAM_STATUS = 2505u,
    RESET_CAMERA_SETTINGS = 529u,
    RUN_PREARM_CHECKS = 401u,
    SET_MESSAGE_INTERVAL = 511u,
    SET_CAMERA_MODE = 530u,
    SET_GUIDED_SUBMODE_STANDARD = 4000u,
    SET_GUIDED_SUBMODE_CIRCLE = 4001u,
    START_RX_PAIR = 500u,
    STORAGE_FORMAT = 526u,
    UAVCAN_GET_NODE_INFO = 5200u,
    VIDEO_START_CAPTURE = 2500u,
    VIDEO_STOP_CAPTURE = 2501u,
    VIDEO_START_STREAMING = 2502u,
    VIDEO_STOP_STREAMING = 2503u,
  };


  typedef boost::shared_ptr< ::mavros_msgs::CommandCode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::CommandCode_<ContainerAllocator> const> ConstPtr;

}; // struct CommandCode_

typedef ::mavros_msgs::CommandCode_<std::allocator<void> > CommandCode;

typedef boost::shared_ptr< ::mavros_msgs::CommandCode > CommandCodePtr;
typedef boost::shared_ptr< ::mavros_msgs::CommandCode const> CommandCodeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::CommandCode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::CommandCode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::CommandCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::CommandCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::CommandCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::CommandCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::CommandCode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::CommandCode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::CommandCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca752c43f2b771d01f4565fb87c197e3";
  }

  static const char* value(const ::mavros_msgs::CommandCode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca752c43f2b771d0ULL;
  static const uint64_t static_value2 = 0x1f4565fb87c197e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::CommandCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/CommandCode";
  }

  static const char* value(const ::mavros_msgs::CommandCode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::CommandCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MAV_CMD command codes.\n"
"# Actual meaning and params you may find in MAVLink documentation\n"
"# https://mavlink.io/en/messages/common.html#MAV_CMD\n"
"\n"
"# [[[cog:\n"
"# from pymavlink.dialects.v20 import common\n"
"# from collections import OrderedDict\n"
"# import re\n"
"#\n"
"# def wr_enum(enum, ename, pfx='', bsz=16):\n"
"#     cog.outl(\"# \" + ename + \"_\" + pfx)\n"
"#     for k, e in enum:\n"
"#         # exclude also deprecated commands\n"
"#         if 'MAV_CMD' + \"_\" + pfx in e.name and not re.search('deprecated', e.description, re.IGNORECASE):\n"
"#             sn = e.name[len('MAV_CMD') + 1:]\n"
"#             l = \"uint{bsz} {sn} = {k}\".format(**locals())\n"
"#             if e.description:\n"
"#                 l += ' ' * (50 - len(l)) + ' # ' + e.description\n"
"#             cog.outl(l)\n"
"#     cog.out('\\n')\n"
"#\n"
"# def decl_enum(ename):\n"
"#     enum = sorted(common.enums[ename].items())\n"
"#     enum.pop() # remove ENUM_END\n"
"#\n"
"#     enumt = []\n"
"#     # exception list of commands to not include\n"
"#     exlist = ['SPATIAL', 'USER', 'WAYPOINT']\n"
"#     for k, e in enum:\n"
"#         enumt.extend(e.name[len(ename) + 1:].split('_')[0:1])\n"
"#\n"
"#     enumt = sorted(set(enumt))\n"
"#     enumt = [word for word in enumt if word not in exlist]\n"
"#\n"
"#     for key in enumt:\n"
"#         wr_enum(enum, ename, key)\n"
"#\n"
"# decl_enum('MAV_CMD')\n"
"# ]]]\n"
"# MAV_CMD_AIRFRAME\n"
"uint16 AIRFRAME_CONFIGURATION = 2520\n"
"\n"
"# MAV_CMD_ARM\n"
"uint16 ARM_AUTHORIZATION_REQUEST = 3001            # Request authorization to arm the vehicle to a external entity, the arm authorizer is responsible to request all data that is needs from the vehicle before authorize or deny the request. If approved the progress of command_ack message should be set with period of time that this authorization is valid in seconds or in case it was denied it should be set with one of the reasons in ARM_AUTH_DENIED_REASON.\n"
"        \n"
"\n"
"# MAV_CMD_COMPONENT\n"
"uint16 COMPONENT_ARM_DISARM = 400                  # Arms / Disarms a component\n"
"\n"
"# MAV_CMD_CONDITION\n"
"uint16 CONDITION_DELAY = 112                       # Delay mission state machine.\n"
"uint16 CONDITION_CHANGE_ALT = 113                  # Ascend/descend to target altitude at specified rate. Delay mission state machine until desired altitude reached.\n"
"uint16 CONDITION_DISTANCE = 114                    # Delay mission state machine until within desired distance of next NAV point.\n"
"uint16 CONDITION_YAW = 115                         # Reach a certain target angle.\n"
"uint16 CONDITION_LAST = 159                        # NOP - This command is only used to mark the upper limit of the CONDITION commands in the enumeration\n"
"\n"
"# MAV_CMD_CONTROL\n"
"uint16 CONTROL_HIGH_LATENCY = 2600                 # Request to start/stop transmitting over the high latency telemetry\n"
"\n"
"# MAV_CMD_DO\n"
"uint16 DO_FOLLOW = 32                              # Begin following a target\n"
"uint16 DO_FOLLOW_REPOSITION = 33                   # Reposition the MAV after a follow target command has been sent\n"
"uint16 DO_SET_MODE = 176                           # Set system mode.\n"
"uint16 DO_JUMP = 177                               # Jump to the desired command in the mission list.  Repeat this action only the specified number of times\n"
"uint16 DO_CHANGE_SPEED = 178                       # Change speed and/or throttle set points.\n"
"uint16 DO_SET_HOME = 179                           # Changes the home location either to the current location or a specified location.\n"
"uint16 DO_SET_PARAMETER = 180                      # Set a system parameter.  Caution!  Use of this command requires knowledge of the numeric enumeration value of the parameter.\n"
"uint16 DO_SET_RELAY = 181                          # Set a relay to a condition.\n"
"uint16 DO_REPEAT_RELAY = 182                       # Cycle a relay on and off for a desired number of cycles with a desired period.\n"
"uint16 DO_SET_SERVO = 183                          # Set a servo to a desired PWM value.\n"
"uint16 DO_REPEAT_SERVO = 184                       # Cycle a between its nominal setting and a desired PWM for a desired number of cycles with a desired period.\n"
"uint16 DO_FLIGHTTERMINATION = 185                  # Terminate flight immediately\n"
"uint16 DO_CHANGE_ALTITUDE = 186                    # Change altitude set point.\n"
"uint16 DO_LAND_START = 189                         # Mission command to perform a landing. This is used as a marker in a mission to tell the autopilot where a sequence of mission items that represents a landing starts. It may also be sent via a COMMAND_LONG to trigger a landing, in which case the nearest (geographically) landing sequence in the mission will be used. The Latitude/Longitude is optional, and may be set to 0 if not needed. If specified then it will be used to help find the closest landing sequence.\n"
"uint16 DO_RALLY_LAND = 190                         # Mission command to perform a landing from a rally point.\n"
"uint16 DO_GO_AROUND = 191                          # Mission command to safely abort an autonomous landing.\n"
"uint16 DO_REPOSITION = 192                         # Reposition the vehicle to a specific WGS84 global position.\n"
"uint16 DO_PAUSE_CONTINUE = 193                     # If in a GPS controlled position mode, hold the current position or continue.\n"
"uint16 DO_SET_REVERSE = 194                        # Set moving direction to forward or reverse.\n"
"uint16 DO_SET_ROI_LOCATION = 195                   # Sets the region of interest (ROI) to a location. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.\n"
"uint16 DO_SET_ROI_WPNEXT_OFFSET = 196              # Sets the region of interest (ROI) to be toward next waypoint, with optional pitch/roll/yaw offset. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.\n"
"uint16 DO_SET_ROI_NONE = 197                       # Cancels any previous ROI command returning the vehicle/sensors to default flight characteristics. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.\n"
"uint16 DO_SET_ROI_SYSID = 198                      # Mount tracks system with specified system ID. Determination of target vehicle position may be done with GLOBAL_POSITION_INT or any other means.\n"
"uint16 DO_CONTROL_VIDEO = 200                      # Control onboard camera system.\n"
"uint16 DO_SET_ROI = 201                            # Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.\n"
"uint16 DO_DIGICAM_CONFIGURE = 202                  # Configure digital camera. This is a fallback message for systems that have not yet implemented PARAM_EXT_XXX messages and camera definition files (see https://mavlink.io/en/services/camera_def.html ).\n"
"uint16 DO_DIGICAM_CONTROL = 203                    # Control digital camera. This is a fallback message for systems that have not yet implemented PARAM_EXT_XXX messages and camera definition files (see https://mavlink.io/en/services/camera_def.html ).\n"
"uint16 DO_MOUNT_CONFIGURE = 204                    # Mission command to configure a camera or antenna mount\n"
"uint16 DO_MOUNT_CONTROL = 205                      # Mission command to control a camera or antenna mount\n"
"uint16 DO_SET_CAM_TRIGG_DIST = 206                 # Mission command to set camera trigger distance for this flight. The camera is triggered each time this distance is exceeded. This command can also be used to set the shutter integration time for the camera.\n"
"uint16 DO_FENCE_ENABLE = 207                       # Mission command to enable the geofence\n"
"uint16 DO_PARACHUTE = 208                          # Mission item/command to release a parachute or enable/disable auto release.\n"
"uint16 DO_MOTOR_TEST = 209                         # Mission command to perform motor test.\n"
"uint16 DO_INVERTED_FLIGHT = 210                    # Change to/from inverted flight.\n"
"uint16 DO_GRIPPER = 211                            # Mission command to operate a gripper.\n"
"uint16 DO_AUTOTUNE_ENABLE = 212                    # Enable/disable autotune.\n"
"uint16 DO_SET_CAM_TRIGG_INTERVAL = 214             # Mission command to set camera trigger interval for this flight. If triggering is enabled, the camera is triggered each time this interval expires. This command can also be used to set the shutter integration time for the camera.\n"
"uint16 DO_MOUNT_CONTROL_QUAT = 220                 # Mission command to control a camera or antenna mount, using a quaternion as reference.\n"
"uint16 DO_GUIDED_MASTER = 221                      # set id of master controller\n"
"uint16 DO_GUIDED_LIMITS = 222                      # Set limits for external control\n"
"uint16 DO_ENGINE_CONTROL = 223                     # Control vehicle engine. This is interpreted by the vehicles engine controller to change the target engine state. It is intended for vehicles with internal combustion engines\n"
"uint16 DO_SET_MISSION_CURRENT = 224                # Set the mission item with sequence number seq as current item. This means that the MAV will continue to this mission item on the shortest path (not following the mission items in-between).\n"
"uint16 DO_LAST = 240                               # NOP - This command is only used to mark the upper limit of the DO commands in the enumeration\n"
"uint16 DO_JUMP_TAG = 601                           # Jump to the matching tag in the mission list. Repeat this action for the specified number of times. A mission should contain a single matching tag for each jump. If this is not the case then a jump to a missing tag should complete the mission, and a jump where there are multiple matching tags should always select the one with the lowest mission sequence number.\n"
"uint16 DO_TRIGGER_CONTROL = 2003                   # Enable or disable on-board camera triggering system.\n"
"uint16 DO_VTOL_TRANSITION = 3000                   # Request VTOL transition\n"
"uint16 DO_ADSB_OUT_IDENT = 10001                   # Trigger the start of an ADSB-out IDENT. This should only be used when requested to do so by an Air Traffic Controller in controlled airspace. This starts the IDENT which is then typically held for 18 seconds by the hardware per the Mode A, C, and S transponder spec.\n"
"uint16 DO_WINCH = 42600                            # Command to operate winch.\n"
"\n"
"# MAV_CMD_FIXED\n"
"uint16 FIXED_MAG_CAL_YAW = 42006                   # Magnetometer calibration based on provided known yaw. This allows for fast calibration using WMM field tables in the vehicle, given only the known yaw of the vehicle. If Latitude and longitude are both zero then use the current vehicle location.\n"
"\n"
"# MAV_CMD_GET\n"
"uint16 GET_HOME_POSITION = 410                     # Request the home position from the vehicle.\n"
"uint16 GET_MESSAGE_INTERVAL = 510                  # Request the interval between messages for a particular MAVLink message ID. The receiver should ACK the command and then emit its response in a MESSAGE_INTERVAL message.\n"
"\n"
"# MAV_CMD_IMAGE\n"
"uint16 IMAGE_START_CAPTURE = 2000                  # Start image capture sequence. Sends CAMERA_IMAGE_CAPTURED after each capture. Use NaN for reserved values.\n"
"uint16 IMAGE_STOP_CAPTURE = 2001                   # Stop image capture sequence Use NaN for reserved values.\n"
"\n"
"# MAV_CMD_JUMP\n"
"uint16 JUMP_TAG = 600                              # Tagged jump target. Can be jumped to with MAV_CMD_DO_JUMP_TAG.\n"
"\n"
"# MAV_CMD_LOGGING\n"
"uint16 LOGGING_START = 2510                        # Request to start streaming logging data over MAVLink (see also LOGGING_DATA message)\n"
"uint16 LOGGING_STOP = 2511                         # Request to stop streaming log data over MAVLink\n"
"\n"
"# MAV_CMD_MISSION\n"
"uint16 MISSION_START = 300                         # start running a mission\n"
"\n"
"# MAV_CMD_NAV\n"
"uint16 NAV_WAYPOINT = 16                           # Navigate to waypoint.\n"
"uint16 NAV_LOITER_UNLIM = 17                       # Loiter around this waypoint an unlimited amount of time\n"
"uint16 NAV_LOITER_TURNS = 18                       # Loiter around this waypoint for X turns\n"
"uint16 NAV_LOITER_TIME = 19                        # Loiter around this waypoint for X seconds\n"
"uint16 NAV_RETURN_TO_LAUNCH = 20                   # Return to launch location\n"
"uint16 NAV_LAND = 21                               # Land at location.\n"
"uint16 NAV_TAKEOFF = 22                            # Takeoff from ground / hand. Vehicles that support multiple takeoff modes (e.g. VTOL quadplane) should take off using the currently configured mode.\n"
"uint16 NAV_LAND_LOCAL = 23                         # Land at local position (local frame only)\n"
"uint16 NAV_TAKEOFF_LOCAL = 24                      # Takeoff from local position (local frame only)\n"
"uint16 NAV_FOLLOW = 25                             # Vehicle following, i.e. this waypoint represents the position of a moving vehicle\n"
"uint16 NAV_CONTINUE_AND_CHANGE_ALT = 30            # Continue on the current course and climb/descend to specified altitude.  When the altitude is reached continue to the next command (i.e., don't proceed to the next command until the desired altitude is reached.\n"
"uint16 NAV_LOITER_TO_ALT = 31                      # Begin loiter at the specified Latitude and Longitude.  If Lat=Lon=0, then loiter at the current position.  Don't consider the navigation command complete (don't leave loiter) until the altitude has been reached. Additionally, if the Heading Required parameter is non-zero the aircraft will not leave the loiter until heading toward the next waypoint.\n"
"uint16 NAV_ROI = 80                                # Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.\n"
"uint16 NAV_PATHPLANNING = 81                       # Control autonomous path planning on the MAV.\n"
"uint16 NAV_SPLINE_WAYPOINT = 82                    # Navigate to waypoint using a spline path.\n"
"uint16 NAV_VTOL_TAKEOFF = 84                       # Takeoff from ground using VTOL mode, and transition to forward flight with specified heading.\n"
"uint16 NAV_VTOL_LAND = 85                          # Land using VTOL mode\n"
"uint16 NAV_GUIDED_ENABLE = 92                      # hand control over to an external controller\n"
"uint16 NAV_DELAY = 93                              # Delay the next navigation command a number of seconds or until a specified time\n"
"uint16 NAV_PAYLOAD_PLACE = 94                      # Descend and place payload. Vehicle moves to specified location, descends until it detects a hanging payload has reached the ground, and then releases the payload. If ground is not detected before the reaching the maximum descent value (param1), the command will complete without releasing the payload.\n"
"uint16 NAV_LAST = 95                               # NOP - This command is only used to mark the upper limit of the NAV/ACTION commands in the enumeration\n"
"uint16 NAV_SET_YAW_SPEED = 213                     # Sets a desired vehicle turn angle and speed change.\n"
"uint16 NAV_FENCE_RETURN_POINT = 5000               # Fence return point (there can only be one such point in a geofence definition). If rally points are supported they should be used instead.\n"
"uint16 NAV_FENCE_POLYGON_VERTEX_INCLUSION = 5001   # Fence vertex for an inclusion polygon (the polygon must not be self-intersecting). The vehicle must stay within this area. Minimum of 3 vertices required.\n"
"        \n"
"uint16 NAV_FENCE_POLYGON_VERTEX_EXCLUSION = 5002   # Fence vertex for an exclusion polygon (the polygon must not be self-intersecting). The vehicle must stay outside this area. Minimum of 3 vertices required.\n"
"        \n"
"uint16 NAV_FENCE_CIRCLE_INCLUSION = 5003           # Circular fence area. The vehicle must stay inside this area.\n"
"        \n"
"uint16 NAV_FENCE_CIRCLE_EXCLUSION = 5004           # Circular fence area. The vehicle must stay outside this area.\n"
"        \n"
"uint16 NAV_RALLY_POINT = 5100                      # Rally point. You can have multiple rally points defined.\n"
"        \n"
"\n"
"# MAV_CMD_OBLIQUE\n"
"uint16 OBLIQUE_SURVEY = 260                        # Mission command to set a Camera Auto Mount Pivoting Oblique Survey (Replaces CAM_TRIGG_DIST for this purpose). The camera is triggered each time this distance is exceeded, then the mount moves to the next position. Params 4~6 set-up the angle limits and number of positions for oblique survey, where mount-enabled vehicles automatically roll the camera between shots to emulate an oblique camera setup (providing an increased HFOV). This command can also be used to set the shutter integration time for the camera.\n"
"\n"
"# MAV_CMD_OVERRIDE\n"
"uint16 OVERRIDE_GOTO = 252                         # Override current mission with command to pause mission, pause mission and move to position, continue/resume mission. When param 1 indicates that the mission is paused (MAV_GOTO_DO_HOLD), param 2 defines whether it holds in place or moves to another position.\n"
"\n"
"# MAV_CMD_PANORAMA\n"
"uint16 PANORAMA_CREATE = 2800                      # Create a panorama at the current position\n"
"\n"
"# MAV_CMD_PAYLOAD\n"
"uint16 PAYLOAD_PREPARE_DEPLOY = 30001              # Deploy payload on a Lat / Lon / Alt position. This includes the navigation to reach the required release position and velocity.\n"
"uint16 PAYLOAD_CONTROL_DEPLOY = 30002              # Control the payload deployment.\n"
"\n"
"# MAV_CMD_PREFLIGHT\n"
"uint16 PREFLIGHT_CALIBRATION = 241                 # Trigger calibration. This command will be only accepted if in pre-flight mode. Except for Temperature Calibration, only one sensor should be set in a single message and all others should be zero.\n"
"uint16 PREFLIGHT_SET_SENSOR_OFFSETS = 242          # Set sensor offsets. This command will be only accepted if in pre-flight mode.\n"
"uint16 PREFLIGHT_UAVCAN = 243                      # Trigger UAVCAN configuration (actuator ID assignment and direction mapping). Note that this maps to the legacy UAVCAN v0 function UAVCAN_ENUMERATE, which is intended to be executed just once during initial vehicle configuration (it is not a normal pre-flight command and has been poorly named).\n"
"uint16 PREFLIGHT_STORAGE = 245                     # Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode.\n"
"uint16 PREFLIGHT_REBOOT_SHUTDOWN = 246             # Request the reboot or shutdown of system components.\n"
"\n"
"# MAV_CMD_REQUEST\n"
"uint16 REQUEST_MESSAGE = 512                       # Request the target system(s) emit a single instance of a specified message (i.e. a \"one-shot\" version of MAV_CMD_SET_MESSAGE_INTERVAL).\n"
"uint16 REQUEST_PROTOCOL_VERSION = 519              # Request MAVLink protocol version compatibility. All receivers should ACK the command and then emit their capabilities in an PROTOCOL_VERSION message\n"
"uint16 REQUEST_AUTOPILOT_CAPABILITIES = 520        # Request autopilot capabilities. The receiver should ACK the command and then emit its capabilities in an AUTOPILOT_VERSION message\n"
"uint16 REQUEST_CAMERA_INFORMATION = 521            # Request camera information (CAMERA_INFORMATION).\n"
"uint16 REQUEST_CAMERA_SETTINGS = 522               # Request camera settings (CAMERA_SETTINGS).\n"
"uint16 REQUEST_STORAGE_INFORMATION = 525           # Request storage information (STORAGE_INFORMATION). Use the command's target_component to target a specific component's storage.\n"
"uint16 REQUEST_CAMERA_CAPTURE_STATUS = 527         # Request camera capture status (CAMERA_CAPTURE_STATUS)\n"
"uint16 REQUEST_FLIGHT_INFORMATION = 528            # Request flight information (FLIGHT_INFORMATION)\n"
"uint16 REQUEST_VIDEO_STREAM_INFORMATION = 2504     # Request video stream information (VIDEO_STREAM_INFORMATION)\n"
"uint16 REQUEST_VIDEO_STREAM_STATUS = 2505          # Request video stream status (VIDEO_STREAM_STATUS)\n"
"\n"
"# MAV_CMD_RESET\n"
"uint16 RESET_CAMERA_SETTINGS = 529                 # Reset all camera settings to Factory Default\n"
"\n"
"# MAV_CMD_RUN\n"
"uint16 RUN_PREARM_CHECKS = 401                     # Instructs system to run pre-arm checks.  This command should return MAV_RESULT_TEMPORARILY_REJECTED in the case the system is armed, otherwse MAV_RESULT_ACCEPTED.  Note that the return value from executing this command does not indicate whether the vehicle is armable or not, just whether the system has successfully run/is currently running the checks.  The result of the checks is reflected in the SYS_STATUS message.\n"
"\n"
"# MAV_CMD_SET\n"
"uint16 SET_MESSAGE_INTERVAL = 511                  # Set the interval between messages for a particular MAVLink message ID. This interface replaces REQUEST_DATA_STREAM.\n"
"uint16 SET_CAMERA_MODE = 530                       # Set camera running mode. Use NaN for reserved values. GCS will send a MAV_CMD_REQUEST_VIDEO_STREAM_STATUS command after a mode change if the camera supports video streaming.\n"
"uint16 SET_GUIDED_SUBMODE_STANDARD = 4000          # This command sets the submode to standard guided when vehicle is in guided mode. The vehicle holds position and altitude and the user can input the desired velocities along all three axes.\n"
"                  \n"
"uint16 SET_GUIDED_SUBMODE_CIRCLE = 4001            # This command sets submode circle when vehicle is in guided mode. Vehicle flies along a circle facing the center of the circle. The user can input the velocity along the circle and change the radius. If no input is given the vehicle will hold position.\n"
"                  \n"
"\n"
"# MAV_CMD_START\n"
"uint16 START_RX_PAIR = 500                         # Starts receiver pairing.\n"
"\n"
"# MAV_CMD_STORAGE\n"
"uint16 STORAGE_FORMAT = 526                        # Format a storage medium. Once format is complete, a STORAGE_INFORMATION message is sent. Use the command's target_component to target a specific component's storage.\n"
"\n"
"# MAV_CMD_UAVCAN\n"
"uint16 UAVCAN_GET_NODE_INFO = 5200                 # Commands the vehicle to respond with a sequence of messages UAVCAN_NODE_INFO, one message per every UAVCAN node that is online. Note that some of the response messages can be lost, which the receiver can detect easily by checking whether every received UAVCAN_NODE_STATUS has a matching message UAVCAN_NODE_INFO received earlier; if not, this command should be sent again in order to request re-transmission of the node information messages.\n"
"\n"
"# MAV_CMD_VIDEO\n"
"uint16 VIDEO_START_CAPTURE = 2500                  # Starts video capture (recording).\n"
"uint16 VIDEO_STOP_CAPTURE = 2501                   # Stop the current video capture (recording).\n"
"uint16 VIDEO_START_STREAMING = 2502                # Start video streaming\n"
"uint16 VIDEO_STOP_STREAMING = 2503                 # Stop the given video stream\n"
"\n"
"# [[[end]]] (checksum: 01fa1723eb3702c301c5562fdf293bbc)\n"
;
  }

  static const char* value(const ::mavros_msgs::CommandCode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::CommandCode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommandCode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::CommandCode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::mavros_msgs::CommandCode_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_COMMANDCODE_H
