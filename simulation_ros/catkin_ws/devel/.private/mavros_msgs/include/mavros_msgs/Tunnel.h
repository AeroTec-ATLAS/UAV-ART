// Generated by gencpp from file mavros_msgs/Tunnel.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_TUNNEL_H
#define MAVROS_MSGS_MESSAGE_TUNNEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct Tunnel_
{
  typedef Tunnel_<ContainerAllocator> Type;

  Tunnel_()
    : target_system(0)
    , target_component(0)
    , payload_type(0)
    , payload_length(0)
    , payload()  {
      payload.assign(0);
  }
  Tunnel_(const ContainerAllocator& _alloc)
    : target_system(0)
    , target_component(0)
    , payload_type(0)
    , payload_length(0)
    , payload()  {
  (void)_alloc;
      payload.assign(0);
  }



   typedef uint8_t _target_system_type;
  _target_system_type target_system;

   typedef uint8_t _target_component_type;
  _target_component_type target_component;

   typedef uint16_t _payload_type_type;
  _payload_type_type payload_type;

   typedef uint8_t _payload_length_type;
  _payload_length_type payload_length;

   typedef boost::array<uint8_t, 128>  _payload_type;
  _payload_type payload;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PAYLOAD_TYPE_UNKNOWN)
  #undef PAYLOAD_TYPE_UNKNOWN
#endif
#if defined(_WIN32) && defined(PAYLOAD_TYPE_STORM32_RESERVED0)
  #undef PAYLOAD_TYPE_STORM32_RESERVED0
#endif
#if defined(_WIN32) && defined(PAYLOAD_TYPE_STORM32_RESERVED1)
  #undef PAYLOAD_TYPE_STORM32_RESERVED1
#endif
#if defined(_WIN32) && defined(PAYLOAD_TYPE_STORM32_RESERVED2)
  #undef PAYLOAD_TYPE_STORM32_RESERVED2
#endif
#if defined(_WIN32) && defined(PAYLOAD_TYPE_STORM32_RESERVED3)
  #undef PAYLOAD_TYPE_STORM32_RESERVED3
#endif
#if defined(_WIN32) && defined(PAYLOAD_TYPE_STORM32_RESERVED4)
  #undef PAYLOAD_TYPE_STORM32_RESERVED4
#endif
#if defined(_WIN32) && defined(PAYLOAD_TYPE_STORM32_RESERVED5)
  #undef PAYLOAD_TYPE_STORM32_RESERVED5
#endif
#if defined(_WIN32) && defined(PAYLOAD_TYPE_STORM32_RESERVED6)
  #undef PAYLOAD_TYPE_STORM32_RESERVED6
#endif
#if defined(_WIN32) && defined(PAYLOAD_TYPE_STORM32_RESERVED7)
  #undef PAYLOAD_TYPE_STORM32_RESERVED7
#endif
#if defined(_WIN32) && defined(PAYLOAD_TYPE_STORM32_RESERVED8)
  #undef PAYLOAD_TYPE_STORM32_RESERVED8
#endif
#if defined(_WIN32) && defined(PAYLOAD_TYPE_STORM32_RESERVED9)
  #undef PAYLOAD_TYPE_STORM32_RESERVED9
#endif

  enum {
    PAYLOAD_TYPE_UNKNOWN = 0u,
    PAYLOAD_TYPE_STORM32_RESERVED0 = 200u,
    PAYLOAD_TYPE_STORM32_RESERVED1 = 201u,
    PAYLOAD_TYPE_STORM32_RESERVED2 = 202u,
    PAYLOAD_TYPE_STORM32_RESERVED3 = 203u,
    PAYLOAD_TYPE_STORM32_RESERVED4 = 204u,
    PAYLOAD_TYPE_STORM32_RESERVED5 = 205u,
    PAYLOAD_TYPE_STORM32_RESERVED6 = 206u,
    PAYLOAD_TYPE_STORM32_RESERVED7 = 207u,
    PAYLOAD_TYPE_STORM32_RESERVED8 = 208u,
    PAYLOAD_TYPE_STORM32_RESERVED9 = 209u,
  };


  typedef boost::shared_ptr< ::mavros_msgs::Tunnel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::Tunnel_<ContainerAllocator> const> ConstPtr;

}; // struct Tunnel_

typedef ::mavros_msgs::Tunnel_<std::allocator<void> > Tunnel;

typedef boost::shared_ptr< ::mavros_msgs::Tunnel > TunnelPtr;
typedef boost::shared_ptr< ::mavros_msgs::Tunnel const> TunnelConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::Tunnel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::Tunnel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::Tunnel_<ContainerAllocator1> & lhs, const ::mavros_msgs::Tunnel_<ContainerAllocator2> & rhs)
{
  return lhs.target_system == rhs.target_system &&
    lhs.target_component == rhs.target_component &&
    lhs.payload_type == rhs.payload_type &&
    lhs.payload_length == rhs.payload_length &&
    lhs.payload == rhs.payload;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::Tunnel_<ContainerAllocator1> & lhs, const ::mavros_msgs::Tunnel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::Tunnel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::Tunnel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::Tunnel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::Tunnel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::Tunnel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::Tunnel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::Tunnel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d8c215067d3b319bbb219c37c1ebc5d";
  }

  static const char* value(const ::mavros_msgs::Tunnel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d8c215067d3b319ULL;
  static const uint64_t static_value2 = 0xbbb219c37c1ebc5dULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::Tunnel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/Tunnel";
  }

  static const char* value(const ::mavros_msgs::Tunnel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::Tunnel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Tunnel\n"
"#\n"
"# https://mavlink.io/en/messages/common.html#TUNNEL\n"
"\n"
"uint8 target_system\n"
"uint8 target_component\n"
"uint16 payload_type\n"
"uint8 payload_length\n"
"uint8[128] payload\n"
"\n"
"# [[[cog:\n"
"# from pymavlink.dialects.v20 import common\n"
"#\n"
"# def decl_enum(ename, pfx='', bsz=8):\n"
"#     enum = sorted(common.enums[ename].items())\n"
"#     enum.pop() # remove ENUM_END\n"
"#\n"
"#     cog.outl(\"# \" + ename)\n"
"#     for k, e in enum:\n"
"#         sn = e.name[len(ename) + 1:]\n"
"#         l = \"uint{bsz} {pfx}{sn} = {k}\".format(**locals())\n"
"#         if e.description:\n"
"#             l += ' ' * (40 - len(l)) + ' # ' + e.description\n"
"#         cog.outl(l)\n"
"#\n"
"# decl_enum('MAV_TUNNEL_PAYLOAD_TYPE', 'PAYLOAD_TYPE_', 16)\n"
"# ]]]\n"
"# MAV_TUNNEL_PAYLOAD_TYPE\n"
"uint16 PAYLOAD_TYPE_UNKNOWN = 0          # Encoding of payload unknown.\n"
"uint16 PAYLOAD_TYPE_STORM32_RESERVED0 = 200 # Registered for STorM32 gimbal controller.\n"
"uint16 PAYLOAD_TYPE_STORM32_RESERVED1 = 201 # Registered for STorM32 gimbal controller.\n"
"uint16 PAYLOAD_TYPE_STORM32_RESERVED2 = 202 # Registered for STorM32 gimbal controller.\n"
"uint16 PAYLOAD_TYPE_STORM32_RESERVED3 = 203 # Registered for STorM32 gimbal controller.\n"
"uint16 PAYLOAD_TYPE_STORM32_RESERVED4 = 204 # Registered for STorM32 gimbal controller.\n"
"uint16 PAYLOAD_TYPE_STORM32_RESERVED5 = 205 # Registered for STorM32 gimbal controller.\n"
"uint16 PAYLOAD_TYPE_STORM32_RESERVED6 = 206 # Registered for STorM32 gimbal controller.\n"
"uint16 PAYLOAD_TYPE_STORM32_RESERVED7 = 207 # Registered for STorM32 gimbal controller.\n"
"uint16 PAYLOAD_TYPE_STORM32_RESERVED8 = 208 # Registered for STorM32 gimbal controller.\n"
"uint16 PAYLOAD_TYPE_STORM32_RESERVED9 = 209 # Registered for STorM32 gimbal controller.\n"
"# [[[end]]] (checksum: 3327b212af02c2d47d940cd6de049624)\n"
;
  }

  static const char* value(const ::mavros_msgs::Tunnel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::Tunnel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_system);
      stream.next(m.target_component);
      stream.next(m.payload_type);
      stream.next(m.payload_length);
      stream.next(m.payload);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Tunnel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::Tunnel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::Tunnel_<ContainerAllocator>& v)
  {
    s << indent << "target_system: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_system);
    s << indent << "target_component: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_component);
    s << indent << "payload_type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.payload_type);
    s << indent << "payload_length: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.payload_length);
    s << indent << "payload[]" << std::endl;
    for (size_t i = 0; i < v.payload.size(); ++i)
    {
      s << indent << "  payload[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.payload[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_TUNNEL_H
