// Generated by gencpp from file mavros_msgs/ADSBVehicle.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_ADSBVEHICLE_H
#define MAVROS_MSGS_MESSAGE_ADSBVEHICLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavros_msgs
{
template <class ContainerAllocator>
struct ADSBVehicle_
{
  typedef ADSBVehicle_<ContainerAllocator> Type;

  ADSBVehicle_()
    : header()
    , ICAO_address(0)
    , callsign()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , heading(0.0)
    , hor_velocity(0.0)
    , ver_velocity(0.0)
    , altitude_type(0)
    , emitter_type(0)
    , tslc()
    , flags(0)
    , squawk(0)  {
    }
  ADSBVehicle_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ICAO_address(0)
    , callsign(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , heading(0.0)
    , hor_velocity(0.0)
    , ver_velocity(0.0)
    , altitude_type(0)
    , emitter_type(0)
    , tslc()
    , flags(0)
    , squawk(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _ICAO_address_type;
  _ICAO_address_type ICAO_address;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _callsign_type;
  _callsign_type callsign;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef float _altitude_type;
  _altitude_type altitude;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _hor_velocity_type;
  _hor_velocity_type hor_velocity;

   typedef float _ver_velocity_type;
  _ver_velocity_type ver_velocity;

   typedef uint8_t _altitude_type_type;
  _altitude_type_type altitude_type;

   typedef uint8_t _emitter_type_type;
  _emitter_type_type emitter_type;

   typedef ros::Duration _tslc_type;
  _tslc_type tslc;

   typedef uint16_t _flags_type;
  _flags_type flags;

   typedef uint16_t _squawk_type;
  _squawk_type squawk;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ALT_PRESSURE_QNH)
  #undef ALT_PRESSURE_QNH
#endif
#if defined(_WIN32) && defined(ALT_GEOMETRIC)
  #undef ALT_GEOMETRIC
#endif
#if defined(_WIN32) && defined(EMITTER_NO_INFO)
  #undef EMITTER_NO_INFO
#endif
#if defined(_WIN32) && defined(EMITTER_LIGHT)
  #undef EMITTER_LIGHT
#endif
#if defined(_WIN32) && defined(EMITTER_SMALL)
  #undef EMITTER_SMALL
#endif
#if defined(_WIN32) && defined(EMITTER_LARGE)
  #undef EMITTER_LARGE
#endif
#if defined(_WIN32) && defined(EMITTER_HIGH_VORTEX_LARGE)
  #undef EMITTER_HIGH_VORTEX_LARGE
#endif
#if defined(_WIN32) && defined(EMITTER_HEAVY)
  #undef EMITTER_HEAVY
#endif
#if defined(_WIN32) && defined(EMITTER_HIGHLY_MANUV)
  #undef EMITTER_HIGHLY_MANUV
#endif
#if defined(_WIN32) && defined(EMITTER_ROTOCRAFT)
  #undef EMITTER_ROTOCRAFT
#endif
#if defined(_WIN32) && defined(EMITTER_UNASSIGNED)
  #undef EMITTER_UNASSIGNED
#endif
#if defined(_WIN32) && defined(EMITTER_GLIDER)
  #undef EMITTER_GLIDER
#endif
#if defined(_WIN32) && defined(EMITTER_LIGHTER_AIR)
  #undef EMITTER_LIGHTER_AIR
#endif
#if defined(_WIN32) && defined(EMITTER_PARACHUTE)
  #undef EMITTER_PARACHUTE
#endif
#if defined(_WIN32) && defined(EMITTER_ULTRA_LIGHT)
  #undef EMITTER_ULTRA_LIGHT
#endif
#if defined(_WIN32) && defined(EMITTER_UNASSIGNED2)
  #undef EMITTER_UNASSIGNED2
#endif
#if defined(_WIN32) && defined(EMITTER_UAV)
  #undef EMITTER_UAV
#endif
#if defined(_WIN32) && defined(EMITTER_SPACE)
  #undef EMITTER_SPACE
#endif
#if defined(_WIN32) && defined(EMITTER_UNASSGINED3)
  #undef EMITTER_UNASSGINED3
#endif
#if defined(_WIN32) && defined(EMITTER_EMERGENCY_SURFACE)
  #undef EMITTER_EMERGENCY_SURFACE
#endif
#if defined(_WIN32) && defined(EMITTER_SERVICE_SURFACE)
  #undef EMITTER_SERVICE_SURFACE
#endif
#if defined(_WIN32) && defined(EMITTER_POINT_OBSTACLE)
  #undef EMITTER_POINT_OBSTACLE
#endif
#if defined(_WIN32) && defined(FLAG_VALID_COORDS)
  #undef FLAG_VALID_COORDS
#endif
#if defined(_WIN32) && defined(FLAG_VALID_ALTITUDE)
  #undef FLAG_VALID_ALTITUDE
#endif
#if defined(_WIN32) && defined(FLAG_VALID_HEADING)
  #undef FLAG_VALID_HEADING
#endif
#if defined(_WIN32) && defined(FLAG_VALID_VELOCITY)
  #undef FLAG_VALID_VELOCITY
#endif
#if defined(_WIN32) && defined(FLAG_VALID_CALLSIGN)
  #undef FLAG_VALID_CALLSIGN
#endif
#if defined(_WIN32) && defined(FLAG_VALID_SQUAWK)
  #undef FLAG_VALID_SQUAWK
#endif
#if defined(_WIN32) && defined(FLAG_SIMULATED)
  #undef FLAG_SIMULATED
#endif
#if defined(_WIN32) && defined(FLAG_VERTICAL_VELOCITY_VALID)
  #undef FLAG_VERTICAL_VELOCITY_VALID
#endif
#if defined(_WIN32) && defined(FLAG_BARO_VALID)
  #undef FLAG_BARO_VALID
#endif
#if defined(_WIN32) && defined(FLAG_SOURCE_UAT)
  #undef FLAG_SOURCE_UAT
#endif

  enum {
    ALT_PRESSURE_QNH = 0u,
    ALT_GEOMETRIC = 1u,
    EMITTER_NO_INFO = 0u,
    EMITTER_LIGHT = 1u,
    EMITTER_SMALL = 2u,
    EMITTER_LARGE = 3u,
    EMITTER_HIGH_VORTEX_LARGE = 4u,
    EMITTER_HEAVY = 5u,
    EMITTER_HIGHLY_MANUV = 6u,
    EMITTER_ROTOCRAFT = 7u,
    EMITTER_UNASSIGNED = 8u,
    EMITTER_GLIDER = 9u,
    EMITTER_LIGHTER_AIR = 10u,
    EMITTER_PARACHUTE = 11u,
    EMITTER_ULTRA_LIGHT = 12u,
    EMITTER_UNASSIGNED2 = 13u,
    EMITTER_UAV = 14u,
    EMITTER_SPACE = 15u,
    EMITTER_UNASSGINED3 = 16u,
    EMITTER_EMERGENCY_SURFACE = 17u,
    EMITTER_SERVICE_SURFACE = 18u,
    EMITTER_POINT_OBSTACLE = 19u,
    FLAG_VALID_COORDS = 1u,
    FLAG_VALID_ALTITUDE = 2u,
    FLAG_VALID_HEADING = 4u,
    FLAG_VALID_VELOCITY = 8u,
    FLAG_VALID_CALLSIGN = 16u,
    FLAG_VALID_SQUAWK = 32u,
    FLAG_SIMULATED = 64u,
    FLAG_VERTICAL_VELOCITY_VALID = 128u,
    FLAG_BARO_VALID = 256u,
    FLAG_SOURCE_UAT = 32768u,
  };


  typedef boost::shared_ptr< ::mavros_msgs::ADSBVehicle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::ADSBVehicle_<ContainerAllocator> const> ConstPtr;

}; // struct ADSBVehicle_

typedef ::mavros_msgs::ADSBVehicle_<std::allocator<void> > ADSBVehicle;

typedef boost::shared_ptr< ::mavros_msgs::ADSBVehicle > ADSBVehiclePtr;
typedef boost::shared_ptr< ::mavros_msgs::ADSBVehicle const> ADSBVehicleConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::ADSBVehicle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::ADSBVehicle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::ADSBVehicle_<ContainerAllocator1> & lhs, const ::mavros_msgs::ADSBVehicle_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ICAO_address == rhs.ICAO_address &&
    lhs.callsign == rhs.callsign &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.heading == rhs.heading &&
    lhs.hor_velocity == rhs.hor_velocity &&
    lhs.ver_velocity == rhs.ver_velocity &&
    lhs.altitude_type == rhs.altitude_type &&
    lhs.emitter_type == rhs.emitter_type &&
    lhs.tslc == rhs.tslc &&
    lhs.flags == rhs.flags &&
    lhs.squawk == rhs.squawk;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::ADSBVehicle_<ContainerAllocator1> & lhs, const ::mavros_msgs::ADSBVehicle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::ADSBVehicle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::ADSBVehicle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::ADSBVehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::ADSBVehicle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::ADSBVehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::ADSBVehicle_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::ADSBVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d532685113a66fcc6ba0e6363ace0244";
  }

  static const char* value(const ::mavros_msgs::ADSBVehicle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd532685113a66fccULL;
  static const uint64_t static_value2 = 0x6ba0e6363ace0244ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::ADSBVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/ADSBVehicle";
  }

  static const char* value(const ::mavros_msgs::ADSBVehicle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::ADSBVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The location and information of an ADSB vehicle\n"
"#\n"
"# https://mavlink.io/en/messages/common.html#ADSB_VEHICLE\n"
"\n"
"# [[[cog:\n"
"# from pymavlink.dialects.v20 import common\n"
"#\n"
"# def decl_enum(ename, pfx='', bsz=8):\n"
"#     enum = sorted(common.enums[ename].items())\n"
"#     enum.pop() # remove ENUM_END\n"
"#\n"
"#     cog.outl(\"# \" + ename)\n"
"#     for k, e in enum:\n"
"#         sn = e.name[len(ename) + 1:]\n"
"#         l = \"uint{bsz} {pfx}{sn} = {k}\".format(**locals())\n"
"#         if e.description:\n"
"#             l += ' ' * (40 - len(l)) + ' # ' + e.description\n"
"#         cog.outl(l)\n"
"#\n"
"# decl_enum('ADSB_ALTITUDE_TYPE', 'ALT_')\n"
"# decl_enum('ADSB_EMITTER_TYPE', 'EMITTER_')\n"
"# decl_enum('ADSB_FLAGS', 'FLAG_', 16)\n"
"# ]]]\n"
"# ADSB_ALTITUDE_TYPE\n"
"uint8 ALT_PRESSURE_QNH = 0               # Altitude reported from a Baro source using QNH reference\n"
"uint8 ALT_GEOMETRIC = 1                  # Altitude reported from a GNSS source\n"
"# ADSB_EMITTER_TYPE\n"
"uint8 EMITTER_NO_INFO = 0\n"
"uint8 EMITTER_LIGHT = 1\n"
"uint8 EMITTER_SMALL = 2\n"
"uint8 EMITTER_LARGE = 3\n"
"uint8 EMITTER_HIGH_VORTEX_LARGE = 4\n"
"uint8 EMITTER_HEAVY = 5\n"
"uint8 EMITTER_HIGHLY_MANUV = 6\n"
"uint8 EMITTER_ROTOCRAFT = 7\n"
"uint8 EMITTER_UNASSIGNED = 8\n"
"uint8 EMITTER_GLIDER = 9\n"
"uint8 EMITTER_LIGHTER_AIR = 10\n"
"uint8 EMITTER_PARACHUTE = 11\n"
"uint8 EMITTER_ULTRA_LIGHT = 12\n"
"uint8 EMITTER_UNASSIGNED2 = 13\n"
"uint8 EMITTER_UAV = 14\n"
"uint8 EMITTER_SPACE = 15\n"
"uint8 EMITTER_UNASSGINED3 = 16\n"
"uint8 EMITTER_EMERGENCY_SURFACE = 17\n"
"uint8 EMITTER_SERVICE_SURFACE = 18\n"
"uint8 EMITTER_POINT_OBSTACLE = 19\n"
"# ADSB_FLAGS\n"
"uint16 FLAG_VALID_COORDS = 1\n"
"uint16 FLAG_VALID_ALTITUDE = 2\n"
"uint16 FLAG_VALID_HEADING = 4\n"
"uint16 FLAG_VALID_VELOCITY = 8\n"
"uint16 FLAG_VALID_CALLSIGN = 16\n"
"uint16 FLAG_VALID_SQUAWK = 32\n"
"uint16 FLAG_SIMULATED = 64\n"
"uint16 FLAG_VERTICAL_VELOCITY_VALID = 128\n"
"uint16 FLAG_BARO_VALID = 256\n"
"uint16 FLAG_SOURCE_UAT = 32768\n"
"# [[[end]]] (checksum: a34f2a081739921b6e3e443ed0516d8d)\n"
"\n"
"std_msgs/Header header\n"
"\n"
"uint32 ICAO_address\n"
"string callsign\n"
"\n"
"float64 latitude\n"
"float64 longitude\n"
"float32 altitude 	# AMSL\n"
"\n"
"float32 heading		# deg [0..360)\n"
"float32 hor_velocity	# m/s\n"
"float32 ver_velocity	# m/s\n"
"\n"
"uint8 altitude_type	# Type from ADSB_ALTITUDE_TYPE enum\n"
"uint8 emitter_type	# Type from ADSB_EMITTER_TYPE enum\n"
"\n"
"duration tslc		# Duration from last communication, seconds [0..255]\n"
"uint16 flags		# ADSB_FLAGS bit field\n"
"uint16 squawk		# Squawk code\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavros_msgs::ADSBVehicle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::ADSBVehicle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ICAO_address);
      stream.next(m.callsign);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.heading);
      stream.next(m.hor_velocity);
      stream.next(m.ver_velocity);
      stream.next(m.altitude_type);
      stream.next(m.emitter_type);
      stream.next(m.tslc);
      stream.next(m.flags);
      stream.next(m.squawk);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ADSBVehicle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::ADSBVehicle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::ADSBVehicle_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ICAO_address: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ICAO_address);
    s << indent << "callsign: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.callsign);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "hor_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.hor_velocity);
    s << indent << "ver_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.ver_velocity);
    s << indent << "altitude_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.altitude_type);
    s << indent << "emitter_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emitter_type);
    s << indent << "tslc: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.tslc);
    s << indent << "flags: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.flags);
    s << indent << "squawk: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.squawk);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_ADSBVEHICLE_H
