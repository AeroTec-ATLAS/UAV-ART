// Generated by gencpp from file mavros_msgs/OnboardComputerStatus.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_ONBOARDCOMPUTERSTATUS_H
#define MAVROS_MSGS_MESSAGE_ONBOARDCOMPUTERSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavros_msgs
{
template <class ContainerAllocator>
struct OnboardComputerStatus_
{
  typedef OnboardComputerStatus_<ContainerAllocator> Type;

  OnboardComputerStatus_()
    : header()
    , component(0)
    , uptime(0)
    , type(0)
    , cpu_cores()
    , cpu_combined()
    , gpu_cores()
    , gpu_combined()
    , temperature_board(0)
    , temperature_core()
    , fan_speed()
    , ram_usage(0)
    , ram_total(0)
    , storage_type()
    , storage_usage()
    , storage_total()
    , link_type()
    , link_tx_rate()
    , link_rx_rate()
    , link_tx_max()
    , link_rx_max()  {
      cpu_cores.assign(0);

      cpu_combined.assign(0);

      gpu_cores.assign(0);

      gpu_combined.assign(0);

      temperature_core.assign(0);

      fan_speed.assign(0);

      storage_type.assign(0);

      storage_usage.assign(0);

      storage_total.assign(0);

      link_type.assign(0);

      link_tx_rate.assign(0);

      link_rx_rate.assign(0);

      link_tx_max.assign(0);

      link_rx_max.assign(0);
  }
  OnboardComputerStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , component(0)
    , uptime(0)
    , type(0)
    , cpu_cores()
    , cpu_combined()
    , gpu_cores()
    , gpu_combined()
    , temperature_board(0)
    , temperature_core()
    , fan_speed()
    , ram_usage(0)
    , ram_total(0)
    , storage_type()
    , storage_usage()
    , storage_total()
    , link_type()
    , link_tx_rate()
    , link_rx_rate()
    , link_tx_max()
    , link_rx_max()  {
  (void)_alloc;
      cpu_cores.assign(0);

      cpu_combined.assign(0);

      gpu_cores.assign(0);

      gpu_combined.assign(0);

      temperature_core.assign(0);

      fan_speed.assign(0);

      storage_type.assign(0);

      storage_usage.assign(0);

      storage_total.assign(0);

      link_type.assign(0);

      link_tx_rate.assign(0);

      link_rx_rate.assign(0);

      link_tx_max.assign(0);

      link_rx_max.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _component_type;
  _component_type component;

   typedef uint32_t _uptime_type;
  _uptime_type uptime;

   typedef uint8_t _type_type;
  _type_type type;

   typedef boost::array<uint8_t, 8>  _cpu_cores_type;
  _cpu_cores_type cpu_cores;

   typedef boost::array<uint8_t, 10>  _cpu_combined_type;
  _cpu_combined_type cpu_combined;

   typedef boost::array<uint8_t, 4>  _gpu_cores_type;
  _gpu_cores_type gpu_cores;

   typedef boost::array<uint8_t, 10>  _gpu_combined_type;
  _gpu_combined_type gpu_combined;

   typedef int8_t _temperature_board_type;
  _temperature_board_type temperature_board;

   typedef boost::array<int8_t, 8>  _temperature_core_type;
  _temperature_core_type temperature_core;

   typedef boost::array<int16_t, 4>  _fan_speed_type;
  _fan_speed_type fan_speed;

   typedef uint32_t _ram_usage_type;
  _ram_usage_type ram_usage;

   typedef uint32_t _ram_total_type;
  _ram_total_type ram_total;

   typedef boost::array<uint32_t, 4>  _storage_type_type;
  _storage_type_type storage_type;

   typedef boost::array<uint32_t, 4>  _storage_usage_type;
  _storage_usage_type storage_usage;

   typedef boost::array<uint32_t, 4>  _storage_total_type;
  _storage_total_type storage_total;

   typedef boost::array<uint32_t, 6>  _link_type_type;
  _link_type_type link_type;

   typedef boost::array<uint32_t, 6>  _link_tx_rate_type;
  _link_tx_rate_type link_tx_rate;

   typedef boost::array<uint32_t, 6>  _link_rx_rate_type;
  _link_rx_rate_type link_rx_rate;

   typedef boost::array<uint32_t, 6>  _link_tx_max_type;
  _link_tx_max_type link_tx_max;

   typedef boost::array<uint32_t, 6>  _link_rx_max_type;
  _link_rx_max_type link_rx_max;





  typedef boost::shared_ptr< ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> const> ConstPtr;

}; // struct OnboardComputerStatus_

typedef ::mavros_msgs::OnboardComputerStatus_<std::allocator<void> > OnboardComputerStatus;

typedef boost::shared_ptr< ::mavros_msgs::OnboardComputerStatus > OnboardComputerStatusPtr;
typedef boost::shared_ptr< ::mavros_msgs::OnboardComputerStatus const> OnboardComputerStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator1> & lhs, const ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.component == rhs.component &&
    lhs.uptime == rhs.uptime &&
    lhs.type == rhs.type &&
    lhs.cpu_cores == rhs.cpu_cores &&
    lhs.cpu_combined == rhs.cpu_combined &&
    lhs.gpu_cores == rhs.gpu_cores &&
    lhs.gpu_combined == rhs.gpu_combined &&
    lhs.temperature_board == rhs.temperature_board &&
    lhs.temperature_core == rhs.temperature_core &&
    lhs.fan_speed == rhs.fan_speed &&
    lhs.ram_usage == rhs.ram_usage &&
    lhs.ram_total == rhs.ram_total &&
    lhs.storage_type == rhs.storage_type &&
    lhs.storage_usage == rhs.storage_usage &&
    lhs.storage_total == rhs.storage_total &&
    lhs.link_type == rhs.link_type &&
    lhs.link_tx_rate == rhs.link_tx_rate &&
    lhs.link_rx_rate == rhs.link_rx_rate &&
    lhs.link_tx_max == rhs.link_tx_max &&
    lhs.link_rx_max == rhs.link_rx_max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator1> & lhs, const ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aebe864fac2952ca9de45a2b65875a60";
  }

  static const char* value(const ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaebe864fac2952caULL;
  static const uint64_t static_value2 = 0x9de45a2b65875a60ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/OnboardComputerStatus";
  }

  static const char* value(const ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Mavros message: ONBOARDCOMPUTERSTATUS\n"
"\n"
"std_msgs/Header header\n"
"\n"
"uint8 component               # See enum MAV_COMPONENT\n"
"\n"
"uint32 uptime               # [ms] Time since system boot\n"
"uint8 type                  # Type of the onboard computer: 0: Mission computer primary, 1: Mission computer backup 1, 2: Mission computer backup 2, 3: Compute node, 4-5: Compute spares, 6-9: Payload computers.\n"
"uint8[8] cpu_cores          # CPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.\n"
"uint8[10] cpu_combined      # Combined CPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused\n"
"uint8[4] gpu_cores          # GPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused\n"
"uint8[10] gpu_combined      # Combined GPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.\n"
"int8 temperature_board      # [degC] Temperature of the board. A value of INT8_MAX implies the field is unused.\n"
"int8[8] temperature_core    # [degC] Temperature of the CPU core. A value of INT8_MAX implies the field is unused.\n"
"int16[4] fan_speed          # [rpm] Fan speeds. A value of INT16_MAX implies the field is unused.\n"
"uint32 ram_usage            # [MiB] Amount of used RAM on the component system. A value of UINT32_MAX implies the field is unused.\n"
"uint32 ram_total            # [MiB] Total amount of RAM on the component system. A value of UINT32_MAX implies the field is unused.\n"
"uint32[4] storage_type      # Storage type: 0: HDD, 1: SSD, 2: EMMC, 3: SD card (non-removable), 4: SD card (removable). A value of UINT32_MAX implies the field is unused.\n"
"uint32[4] storage_usage     # [MiB] Amount of used storage space on the component system. A value of UINT32_MAX implies the field is unused.\n"
"uint32[4] storage_total     # [MiB] Total amount of storage space on the component system. A value of UINT32_MAX implies the field is unused.\n"
"uint32[6] link_type         # Link type: 0-9: UART, 10-19: Wired network, 20-29: Wifi, 30-39: Point-to-point proprietary, 40-49: Mesh proprietary.\n"
"uint32[6] link_tx_rate      # [KiB/s] Network traffic from the component system. A value of UINT32_MAX implies the field is unused.\n"
"uint32[6] link_rx_rate      # [KiB/s] Network traffic to the component system. A value of UINT32_MAX implies the field is unused.\n"
"uint32[6] link_tx_max       # [KiB/s] Network capacity from the component system. A value of UINT32_MAX implies the field is unused.\n"
"uint32[6] link_rx_max       # [KiB/s] Network capacity to the component system. A value of UINT32_MAX implies the field is unused.\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.component);
      stream.next(m.uptime);
      stream.next(m.type);
      stream.next(m.cpu_cores);
      stream.next(m.cpu_combined);
      stream.next(m.gpu_cores);
      stream.next(m.gpu_combined);
      stream.next(m.temperature_board);
      stream.next(m.temperature_core);
      stream.next(m.fan_speed);
      stream.next(m.ram_usage);
      stream.next(m.ram_total);
      stream.next(m.storage_type);
      stream.next(m.storage_usage);
      stream.next(m.storage_total);
      stream.next(m.link_type);
      stream.next(m.link_tx_rate);
      stream.next(m.link_rx_rate);
      stream.next(m.link_tx_max);
      stream.next(m.link_rx_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OnboardComputerStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::OnboardComputerStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "component: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.component);
    s << indent << "uptime: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.uptime);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "cpu_cores[]" << std::endl;
    for (size_t i = 0; i < v.cpu_cores.size(); ++i)
    {
      s << indent << "  cpu_cores[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cpu_cores[i]);
    }
    s << indent << "cpu_combined[]" << std::endl;
    for (size_t i = 0; i < v.cpu_combined.size(); ++i)
    {
      s << indent << "  cpu_combined[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cpu_combined[i]);
    }
    s << indent << "gpu_cores[]" << std::endl;
    for (size_t i = 0; i < v.gpu_cores.size(); ++i)
    {
      s << indent << "  gpu_cores[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.gpu_cores[i]);
    }
    s << indent << "gpu_combined[]" << std::endl;
    for (size_t i = 0; i < v.gpu_combined.size(); ++i)
    {
      s << indent << "  gpu_combined[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.gpu_combined[i]);
    }
    s << indent << "temperature_board: ";
    Printer<int8_t>::stream(s, indent + "  ", v.temperature_board);
    s << indent << "temperature_core[]" << std::endl;
    for (size_t i = 0; i < v.temperature_core.size(); ++i)
    {
      s << indent << "  temperature_core[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.temperature_core[i]);
    }
    s << indent << "fan_speed[]" << std::endl;
    for (size_t i = 0; i < v.fan_speed.size(); ++i)
    {
      s << indent << "  fan_speed[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.fan_speed[i]);
    }
    s << indent << "ram_usage: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ram_usage);
    s << indent << "ram_total: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ram_total);
    s << indent << "storage_type[]" << std::endl;
    for (size_t i = 0; i < v.storage_type.size(); ++i)
    {
      s << indent << "  storage_type[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.storage_type[i]);
    }
    s << indent << "storage_usage[]" << std::endl;
    for (size_t i = 0; i < v.storage_usage.size(); ++i)
    {
      s << indent << "  storage_usage[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.storage_usage[i]);
    }
    s << indent << "storage_total[]" << std::endl;
    for (size_t i = 0; i < v.storage_total.size(); ++i)
    {
      s << indent << "  storage_total[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.storage_total[i]);
    }
    s << indent << "link_type[]" << std::endl;
    for (size_t i = 0; i < v.link_type.size(); ++i)
    {
      s << indent << "  link_type[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.link_type[i]);
    }
    s << indent << "link_tx_rate[]" << std::endl;
    for (size_t i = 0; i < v.link_tx_rate.size(); ++i)
    {
      s << indent << "  link_tx_rate[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.link_tx_rate[i]);
    }
    s << indent << "link_rx_rate[]" << std::endl;
    for (size_t i = 0; i < v.link_rx_rate.size(); ++i)
    {
      s << indent << "  link_rx_rate[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.link_rx_rate[i]);
    }
    s << indent << "link_tx_max[]" << std::endl;
    for (size_t i = 0; i < v.link_tx_max.size(); ++i)
    {
      s << indent << "  link_tx_max[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.link_tx_max[i]);
    }
    s << indent << "link_rx_max[]" << std::endl;
    for (size_t i = 0; i < v.link_rx_max.size(); ++i)
    {
      s << indent << "  link_rx_max[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.link_rx_max[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_ONBOARDCOMPUTERSTATUS_H
